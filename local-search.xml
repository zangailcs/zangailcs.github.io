<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>OnJava06--异常</title>
    <link href="/2024/07/08/EnjoyCoding/Java/OnJava%E5%9F%BA%E7%A1%80%E5%8D%B7/OnJava06/"/>
    <url>/2024/07/08/EnjoyCoding/Java/OnJava%E5%9F%BA%E7%A1%80%E5%8D%B7/OnJava06/</url>
    
    <content type="html"><![CDATA[<h1 id="onjava06--异常">OnJava06--异常</h1><h3 id="异常">1、异常</h3><p>抛出异常时：</p><ol type="1"><li>创建异常对象，也是new创建，并放在堆上</li><li>停止当前执行路径</li><li>异常处理机制接管控制，找到“异常处理程序” （catch块）<ul><li>异常处理程序用来从问题中恢复，要么尝试另一条路径，要么继续执行</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>EnjoyCoding</category>
      
      <category>Java</category>
      
      <category>OnJava笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>OnJava05--集合、函数式编程、流</title>
    <link href="/2024/06/25/EnjoyCoding/Java/OnJava%E5%9F%BA%E7%A1%80%E5%8D%B7/OnJava05/"/>
    <url>/2024/06/25/EnjoyCoding/Java/OnJava%E5%9F%BA%E7%A1%80%E5%8D%B7/OnJava05/</url>
    
    <content type="html"><![CDATA[<h2 id="onjava05--集合函数式编程流">OnJava05--集合、函数式编程、流</h2><h3 id="集合">1、集合</h3><p>Java集合类库是用来“持有”对象的，有两个基本接口：</p><ul><li>Collection：由单独元素组成的序列</li><li>Map：一组键值对象对，用键来查找值</li></ul><h4 id="小记">小记</h4><ul><li>队列和栈的行为都是通过LinkedList提供的</li><li>栈：Java 1.0开始提供的Stack类设计很糟糕（继承了Vector），推荐使用ArrayDeque代替：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs java">Deque&lt;String&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><ul><li><p>Queue 队列：典型的先进先出集合，放入顺序和取出顺序一样。</p><ul><li><p>LinkedList实现了Queue接口，所以可以将其作为Queue的一种实现来使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Queue&lt;Integer&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br></code></pre></td></tr></table></figure></li><li><p>PriorityQueue：优先级队列，默认的排序方法是对象在队列中的<strong>自然排序</strong>，因此默认是小根堆</p></li></ul></li></ul><h3 id="函数式编程">2、函数式编程</h3><p><strong>面向对象编程抽象数据，函数式编程抽象行为。</strong></p><h4 id="lambda表达式">2.1 lambda表达式</h4><ul><li><p>lambda表达式产生的是函数，而不是类</p></li><li><p>基本语法</p><ol type="1"><li><p>参数；</p></li><li><p>后面跟-&gt;，可以理解为“产生”</p></li><li><p>-&gt;后面的都是方法体</p></li></ol></li></ul><h4 id="方法引用">2.2 方法引用</h4><h4 id="函数式接口">2.3 函数式接口</h4><ul><li><p>Java8引入了包含一组接口的java.util.function，其中的每个接口都只包含一个抽象方法，叫做<strong>函数式方法</strong>。</p></li><li><p>注解@FunctionalInterface：强制实施</p><ul><li>如果使用了该注解的接口中方法多于一个，编译会报错“Multiplenon-overriding abstract methods found in interface xxx“</li><li>使用了该注解的接口也叫<strong>单一抽象方法</strong>类型</li></ul></li><li><p>函数式接口的基本类型变种 存在的原因：</p><ul><li>防止在传递参数和返回结果时涉及自动装箱和自动拆箱 -- 为了性能</li><li>eg：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Function&lt;Integer, Double&gt; fid = i -&gt; (<span class="hljs-type">double</span>)i;  <span class="hljs-comment">// 使用基础的Function，必须进行强转</span><br><span class="hljs-type">IntToDoubleFunction</span> <span class="hljs-variable">fid2</span> <span class="hljs-operator">=</span> i -&gt; i; <span class="hljs-comment">// IntToDoubleFunction不需要强转</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="高阶函数">2.4 高阶函数</h4><p><strong>是一个能接受函数作为参数或返回值的函数。</strong></p><h4 id="闭包">2.5 闭包</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 代码段1</span><br><span class="hljs-comment">// &#123;WillNotCompile&#125;</span><br><span class="hljs-keyword">import</span> java.util.function.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Closure1</span> &#123;<br>  IntSupplier <span class="hljs-title function_">makeFun</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// Neither x++ nor i++ will work:</span><br>    <span class="hljs-keyword">return</span> () -&gt; x++ + i++;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码段1编译会失败，提示：“Variable used in lambda expressionshould be final or effectively final”</p><p>而下面的代码段2可以编译：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 代码段2</span><br><span class="hljs-keyword">import</span> java.util.function.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Closure2</span> &#123;<br>  IntSupplier <span class="hljs-title function_">makeFun</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> () -&gt; x + i;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>代码段2中，x和i并不是final的变量，却可以编译成功。<strong>Effectivelyfinal（“实际上的最终变量”）</strong>意义就出现在这里，这个术语是为Java8创建的，意思是虽然未显式地将一个变量声明为最终变量，但仍然可以用最终变量的方式对待它。如果一个局部变量的初始值从不改变，就是Effectivelyfinal。<ul><li>所谓Effectivelyfinal，意味着可以在变量声明前加上final关键字，而不用修改其余代码。</li><li>对于对象的引用，只要不重新指向其他对象就仍可以是Effectivelyfinal，可以修改对象本身。</li></ul></li></ul><h4 id="函数组合">2.6 函数组合</h4><p>将多个函数结合使用，以创建新的函数。</p><ul><li>func.andThen(after)：先执行func，再执行after</li><li>func.compose(before)：先执行before，再执行func</li><li>pred.and(other)：短路与，pred &amp;&amp; other</li><li>pred.or(other)：短路或，pred || other</li><li>pred.negate()：pred取反</li></ul><h3 id="流">3、流</h3><h4 id="流的重要特性">3.1 流的重要特性</h4><ul><li><strong>内部迭代</strong><ul><li>外部迭代：显式编写（for、while等）</li><li><strong>内部迭代</strong>：流编程的一个核心特性，优势：<ul><li>可读性更好</li><li>更易利用多处理器：并行化机制会自动控制</li></ul></li></ul></li><li><strong>惰性求值</strong>：流只在绝对必要时才被求值，可以想象成“延迟列表”<ul><li>因此，流可以表示非常大甚至无限大的序列，而不用考虑内存问题</li></ul></li></ul><h4 id="流的创建">3.2 流的创建</h4><p>（1）Stream.of(T... values)：将一组条目变成一个流</p><p>（2）每个Collection都有stream()方法，生成一个流</p><p>（3）随机数流：</p><ul><li>Random类生成的是基本类型，boxed()流操作会自动装箱</li><li>ints、longs、doubles都有多套方法签名（无参、限制上下限、限制流大小、同时限制流大小和边界），见代码示例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RandomGenerators</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(Stream&lt;T&gt; stream)</span> &#123;<br>    stream<br>      .limit(<span class="hljs-number">4</span>)<br>      .forEach(System.out::println);<br>    System.out.println(<span class="hljs-string">&quot;++++++++&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Random</span> <span class="hljs-variable">rand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(<span class="hljs-number">47</span>);<br>    show(rand.ints().boxed());<br>    show(rand.longs().boxed());<br>    show(rand.doubles().boxed());<br>    <span class="hljs-comment">// Control the lower and upper bounds:</span><br>    show(rand.ints(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>).boxed());<br>    show(rand.longs(<span class="hljs-number">50</span>, <span class="hljs-number">100</span>).boxed());<br>    show(rand.doubles(<span class="hljs-number">20</span>, <span class="hljs-number">30</span>).boxed());<br>    <span class="hljs-comment">// Control the stream size:</span><br>    show(rand.ints(<span class="hljs-number">2</span>).boxed());<br>    show(rand.longs(<span class="hljs-number">2</span>).boxed());<br>    show(rand.doubles(<span class="hljs-number">2</span>).boxed());<br>    <span class="hljs-comment">// Control the stream size and bounds:</span><br>    show(rand.ints(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>).boxed());<br>    show(rand.longs(<span class="hljs-number">3</span>, <span class="hljs-number">12</span>, <span class="hljs-number">22</span>).boxed());<br>    show(rand.doubles(<span class="hljs-number">3</span>, <span class="hljs-number">11.5</span>, <span class="hljs-number">12.3</span>).boxed());<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（4）Stream.generate(Supplier<T> s)：接受任何的Supplier<T>s，生成一个由T的对象组成的流</p><p>（5）Stream.iterate(final T seed, final UnaryOperator<T>f)：从seed开始，将其传给f，f的结果作为下一次调用f的入参。</p><p>（6）Stream.builder，流生成器，代码示例：一旦build()就不能再往里add()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Stream.Builder&lt;String&gt; builder = Stream.builder();<br>builder.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>builder.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br><span class="hljs-comment">// ... 其他方法，往builder里add</span><br>builder.build().forEach(System.out::println);<br><span class="hljs-comment">// builder.add(&quot;ccc&quot;);  报错：java.lang.IllegalStateException at java.util.stream.Streams$StreamBuilderImpl.accept</span><br></code></pre></td></tr></table></figure><p>（7）Arrays.stream(T[] array) 将数组转为流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">stream(T[] array)<br>stream(T[] array, <span class="hljs-type">int</span> startInclusive, <span class="hljs-type">int</span> endExclusive) <span class="hljs-comment">// 选取数组下标在[startInclusive,endExclusive)左开右闭区间内的元素生成流</span><br></code></pre></td></tr></table></figure><p>（8）正则表达式，splitAsStream：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">charSeq</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Not much,of.a cheese? shop really, is it?&quot;</span>;<br>Pattern.compile(<span class="hljs-string">&quot;[ .,?]+&quot;</span>).splitAsStream(charSeq).map(s -&gt; s + <span class="hljs-string">&quot; &quot;</span>).forEach(System.out::print);       <br><span class="hljs-comment">// 输出：Not much of a cheese shop really is it </span><br></code></pre></td></tr></table></figure><h3 id="中间操作">3.3 中间操作</h3><p>中间操作从一个流中接收对象，并将对象作为另一个流送出后端，连接到其他操作。</p><p>（1）peek()：跟踪与调试，接收遵循Consumer函数式接口的函数，没有返回值，所以只能“看看”对象</p><p>（2）sorted()：排序，可以按需指定比较器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">xxx.stream()<br> .sorted(Comparator.reverseOrder()) <span class="hljs-comment">// 逆向自然顺序</span><br> .forEach(System.out::print);<br></code></pre></td></tr></table></figure><p>（3）移除元素：</p><ul><li>distinct()：移除重复元素</li><li>filter(Predicate pred)：保留pred为true的元素</li></ul><p>（4）映射</p><ul><li>map(Function)</li><li>mapToInt(ToIntFunction)</li><li>mapToLong(ToLongFunction)</li><li>mapToDouble(ToDoubleFunction)</li></ul><p>（5）flatMap()：扁平化，将元素流的流里的每个元素流展开为元素（扁平化），传出元素流</p><h3 id="optional类型">3.4 Optional类型</h3><h4 id="基本概念">3.4.1 基本概念</h4><p>（1）既可以作为流元素来占位，又可以保障不存在要找的元素时不会抛出异常。</p><p>（2）以下流操作会返回Optional对象，因为无法确保它们的结果一定存在：</p><ul><li>findFirst</li><li>findAny</li><li>max、min</li><li>reduce</li><li>average</li></ul><p>当流为空时，上述操作的结果均不存在，会返回Optional.empty。</p><p>（3）PS：创建空流的语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Stream.&lt;String&gt;empty();  <span class="hljs-comment">// 如果没有上下文，且不加&lt;String&gt;，Java无法推断类型</span><br>Stream&lt;String&gt; empty = Stream.empty();   <span class="hljs-comment">// 有上下文，可以省略钻石符号</span><br></code></pre></td></tr></table></figure><p>（4）Optional的两个基本动作：</p><ul><li>isPresent：判断里面是否有东西</li><li>get：如果有东西，获取它</li></ul><h4 id="便捷函数">3.4.2 便捷函数</h4><p>简化了“先检查再处理所包含的对象”的过程</p><ul><li><p>ifPresent：如果值存在，就用这个值调用consumer，否则什么都不做</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">ifPresent</span><span class="hljs-params">(Consumer&lt;? <span class="hljs-built_in">super</span> T&gt; consumer)</span><br></code></pre></td></tr></table></figure></li><li><p>orElse：如果对象存在，则返回这个对象，否则返回other</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">T <span class="hljs-title function_">orElse</span><span class="hljs-params">(T other)</span><br></code></pre></td></tr></table></figure></li><li><p>orElseGet：如果对象存在，则返回这个对象，否则返回other函数创建的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">T <span class="hljs-title function_">orElseGet</span><span class="hljs-params">(Supplier&lt;? extends T&gt; other)</span><br></code></pre></td></tr></table></figure></li><li><p>orElseThrow：否则抛出一个exceptionSupplier创建的异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;X <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Throwable</span>&gt; T <span class="hljs-title function_">orElseThrow</span><span class="hljs-params">(Supplier&lt;? extends X&gt; exceptionSupplier)</span> <span class="hljs-keyword">throws</span> X<br></code></pre></td></tr></table></figure></li></ul><h4 id="创建optional">3.4.3 创建Optional</h4><p>Optional类中有下面三个静态方法，来创建Optional：</p><ul><li>empty()：空的Optional</li><li>of(value)：已知value非空</li><li>ofNullable（value）：不确定value是不是null<ul><li>value是null时，自动返回Optional.empty</li><li>否则将value包在Optional中</li></ul></li></ul><h4 id="optional上的filter">3.4.4 Optional上的filter</h4><ul><li>普通的流filter：如果pred返回false，会从流中删除元素</li><li>Optional.filter：如果pred返回false，不会删除元素，而是转化为empty</li></ul><h4 id="由optional组成的流">3.4.5 由Optional组成的流</h4><p>需要针对不同应用采取不同的方法，见代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Signal.stream()<br>  .limit(<span class="hljs-number">10</span>)<br>  .filter(Optional::isPresent) <span class="hljs-comment">// 此处只保留了非empty的Optional</span><br>  .map(Optional::get) <span class="hljs-comment">// 再map调用get来获取包在其中的对象</span><br>  .forEach(System.out::println);<br></code></pre></td></tr></table></figure><h3 id="终结操作">3.5 终结操作</h3><p>接受一个流，并生成一个最终结果。</p><p>（1）将流转换为数组：</p><ul><li>toArray()</li></ul><p>（2）在每个元素上应用某个终结操作：</p><ul><li>forEach：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">forEach</span><span class="hljs-params">(Consumer&lt;? <span class="hljs-built_in">super</span> T&gt; action)</span>; <span class="hljs-comment">// parallel()时，不确保操作元素的顺序，可以最大程度地利用并行流提高效率</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">forEachOrdered</span><span class="hljs-params">(Consumer&lt;? <span class="hljs-built_in">super</span> T&gt; action)</span>; <span class="hljs-comment">// parallel()时，也确保顺序是原始流的顺序</span><br></code></pre></td></tr></table></figure><p>（3）收集操作：</p><ul><li>collect(Collector)：若java.util.stream.Collectors里没有想要的集合类型，可以使用Collectors.toCollection，并将任何类型的Collection的构造方法引用传递给它：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Set&lt;String&gt; words2 =<br>        Stream.of(<span class="hljs-string">&quot;Arrays&quot;</span>, <span class="hljs-string">&quot;Collectors&quot;</span>, <span class="hljs-string">&quot;Exception&quot;</span>, <span class="hljs-string">&quot;is&quot;</span>, <span class="hljs-string">&quot;Output&quot;</span>)<br>                .filter(s -&gt; s.length() &gt; <span class="hljs-number">2</span>)<br>                .limit(<span class="hljs-number">100</span>)<br>                .collect(Collectors.toCollection(TreeSet::<span class="hljs-keyword">new</span>));<br>System.out.println(words2);<br></code></pre></td></tr></table></figure><p>（4）组合所有的流元素： - reduce： <figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs excel">Optional&lt;<span class="hljs-built_in">T</span>&gt; reduce(BinaryOperator&lt;<span class="hljs-built_in">T</span>&gt; accumulator)<br><br><span class="hljs-built_in">T</span> reduce(<span class="hljs-built_in">T</span> identity, BinaryOperator&lt;<span class="hljs-built_in">T</span>&gt; accumulator);<br></code></pre></td></tr></table></figure></p><p>区别在于下面的方法会将identity作为初值，即使流是空的，也能返回identity。</p><p>（5）匹配，下面的api都是短路计算，即遇到一个不符合的元素时，立即返回false</p><ul><li><p>allMatch： <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-title function_">allMatch</span><span class="hljs-params">(Predicate&lt;? <span class="hljs-built_in">super</span> T&gt; predicate)</span>;  <span class="hljs-comment">// 流中所有元素，predicate都为true</span><br></code></pre></td></tr></table></figure></p></li><li><p>anyMatch： <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-title function_">anyMatch</span><span class="hljs-params">(Predicate&lt;? <span class="hljs-built_in">super</span> T&gt; predicate)</span>;  <span class="hljs-comment">// 流中存在任一元素，predicate为true</span><br></code></pre></td></tr></table></figure></p></li><li><p>noneMatch： <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-title function_">noneMatch</span><span class="hljs-params">(Predicate&lt;? <span class="hljs-built_in">super</span> T&gt; predicate)</span>; <span class="hljs-comment">// 流中所有元素，predicate都为false</span><br></code></pre></td></tr></table></figure></p></li></ul><p>（6）选择一个元素</p><ul><li><p>findFirst： <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Optional&lt;T&gt; <span class="hljs-title function_">findFirst</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure></p></li><li><p>findAny： <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Optional&lt;T&gt; <span class="hljs-title function_">findAny</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure></p></li></ul><p>如果需要选择流的最后一个元素，需要使用reduce：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Optional&lt;String&gt; lastobj =<br>      Stream.of(<span class="hljs-string">&quot;one&quot;</span>, <span class="hljs-string">&quot;two&quot;</span>, <span class="hljs-string">&quot;three&quot;</span>)<br>        .reduce((n1, n2) -&gt; n2);<br></code></pre></td></tr></table></figure><p>（7）获得流的相关信息</p><ul><li><p>count： <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-title function_">count</span><span class="hljs-params">()</span>;  <span class="hljs-comment">// 流中元素个数</span><br></code></pre></td></tr></table></figure></p></li><li><p>max： <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Optional&lt;T&gt; <span class="hljs-title function_">max</span><span class="hljs-params">(Comparator&lt;? <span class="hljs-built_in">super</span> T&gt; comparator)</span>;  <span class="hljs-comment">// 最大元素</span><br></code></pre></td></tr></table></figure></p></li><li><p>min： <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Optional&lt;T&gt; <span class="hljs-title function_">min</span><span class="hljs-params">(Comparator&lt;? <span class="hljs-built_in">super</span> T&gt; comparator)</span>;  <span class="hljs-comment">// 最小元素</span><br></code></pre></td></tr></table></figure></p></li></ul><p>数值类型的流还可以计算均值、求和等：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] rints =<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(<span class="hljs-number">47</span>).ints(<span class="hljs-number">0</span>, <span class="hljs-number">1000</span>).limit(<span class="hljs-number">100</span>).toArray();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IntStream <span class="hljs-title function_">rands</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Arrays.stream(rints);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(rands().average().getAsDouble());<br>        System.out.println(rands().max().getAsInt());<br>        System.out.println(rands().min().getAsInt());<br>        System.out.println(rands().sum());<br>        System.out.println(rands().summaryStatistics());<br>    &#125;<br><br><span class="hljs-comment">/** 输出：</span><br><span class="hljs-comment"> * 507.94</span><br><span class="hljs-comment"> * 998</span><br><span class="hljs-comment"> * 8</span><br><span class="hljs-comment"> * 50794</span><br><span class="hljs-comment"> * IntSummaryStatistics&#123;count=100, sum=50794, min=8, average=507.940000, max=998&#125;</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>EnjoyCoding</category>
      
      <category>Java</category>
      
      <category>OnJava笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>OnJava04--接口、内部类</title>
    <link href="/2024/06/19/EnjoyCoding/Java/OnJava%E5%9F%BA%E7%A1%80%E5%8D%B7/OnJava04/"/>
    <url>/2024/06/19/EnjoyCoding/Java/OnJava%E5%9F%BA%E7%A1%80%E5%8D%B7/OnJava04/</url>
    
    <content type="html"><![CDATA[<h1 id="onjava04--接口内部类">OnJava04--接口、内部类</h1><h3 id="接口">1、接口</h3><h4 id="抽象类抽象方法">1.1 抽象类、抽象方法</h4><ul><li>抽象方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><ul><li>抽象类：包含抽象方法的类（不是必需，只要abstract修饰的class都是抽象类，可以阻止对该类的任何实例化）</li><li>抽象类中不能包含private的抽象方法（子类无法重写该方法进行实现）</li></ul><h4 id="接口定义interface">1.2 接口定义（interface）</h4><p>（1）Java8之前：</p><ul><li>interface创建了一个完全抽象的类，不包含任何实现；</li><li>只确定了方法名、参数列表和返回值，但不提供任何方法主体 --接口描述的是一个类应该做什么，而不是应该如何做</li><li>接口用来在类之间建立“协议”</li></ul><p>（2）Java8及之后：</p><ul><li>允许默认方法和静态方法<ul><li>原因：允许向现有接口中添加方法，而不会破坏已经使用该接口的所有代码</li></ul></li></ul><p>（3）接口可以包含字段，隐式的static和final</p><h4 id="接口和抽象类">1.3 接口和抽象类</h4><figure><imgsrc="https://lics-blogs-1258546254.cos.ap-nanjing.myqcloud.com/images/OnJava/image-20240619225139980.png"alt="接口和抽象类区别" /><figcaption aria-hidden="true">接口和抽象类区别</figcaption></figure><h4 id="组合多个接口">1.4 组合多个接口</h4><p>一个类可以实现任意数量的接口，并可以向上转型到每个接口。</p><h4 id="用继承来拓展接口">1.5 用继承来拓展接口</h4><ul><li>可以使用继承向接口中添加新的方法声明</li><li>可以使用继承将多个接口组合成一个新接口</li></ul><h3 id="内部类">2、内部类</h3><ul><li>将逻辑上存在关联的类组织在一起，并能控制一个类在另一个类内的可见性。</li><li>在外部类的非静态方法之外的地方使用内部类时，类型需要写作：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">OuterClassName.InnerClassName<br></code></pre></td></tr></table></figure><h4 id="到外部类的链接">（1）到外部类的链接</h4><ul><li>创建一个内部类时，内部类的对象中会隐含一个链接指向创建该对象的外围对象。通过此链接，内部类对象可以访问外围对象的成员。</li><li>内部类拥有对外围对象所有元素的访问权。</li></ul><h4 id="this和.new">（2）.this和.new</h4><ul><li>在内部类中获取外部类对象的引用：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">OuterClassName.<span class="hljs-built_in">this</span><br></code></pre></td></tr></table></figure><ul><li>外部类的对象创建它的某个内部类的对象：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">obj.<span class="hljs-keyword">new</span> <span class="hljs-title class_">InnerClassName</span>()<br></code></pre></td></tr></table></figure><ul><li>必须先拥有外部类的对象，才能创建内部类对象：因为内部类的对象会隐式连接到用于创建它的外部类对象。<ul><li>静态内部类（static修饰的内部类）并不需要，可以直接创建newOuterClassName.StaticInnerClassName()。</li></ul></li></ul><h4 id="匿名内部类">（3）匿名内部类</h4><p>接口：Contents.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Contents</span> &#123;<br>  <span class="hljs-type">int</span> <span class="hljs-title function_">value</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>示例：Demo.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>  <span class="hljs-keyword">public</span> Contents <span class="hljs-title function_">contents</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Contents</span>() &#123; <span class="hljs-comment">// 内部类定义</span><br>      <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">11</span>;<br>      <span class="hljs-meta">@Override</span> <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">value</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> i; &#125;<br>    &#125;; <span class="hljs-comment">// 需要分号</span><br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Demo</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo</span>();<br>    <span class="hljs-type">Contents</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> p.contents();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>contents()方法创建并返回了一个实现了Contents接口的内部类的对象，而这个类没有名字-- 匿名的。</p><p>上述语法的意思是：“创建一个继承自Contents的匿名类的对象”</p><h4 id="为什么需要内部类">（4）为什么需要内部类</h4><ul><li><strong>每个内部类都可以独立地继承自一个实现。因此外部类是否已经继承了某个实现，对内部类并没有限制。</strong><ul><li>实际上是完善了“多重继承问题”的解决方案。</li></ul></li></ul><h4 id="回调">（5）回调</h4><ul><li>回调：给一个对象提供一段信息，支持其在之后的某个时间点调用回原始的对象中。</li><li>价值：灵活性，可以在运行时动态决定调用哪些方法，常用于GUI</li></ul><h4 id="内部类不能像方法一样被重写">（6）内部类不能像方法一样被重写</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Egg</span> &#123;<br>  <span class="hljs-keyword">private</span> Yolk y;<br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Yolk</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Yolk</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;Egg.Yolk()&quot;</span>);<br>    &#125;<br>  &#125;<br>  Egg() &#123;<br>    System.out.println(<span class="hljs-string">&quot;New Egg()&quot;</span>);<br>    y = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Yolk</span>(); <span class="hljs-comment">// 即使new BigEgg调用到此处，创建的依然是Egg.Yolk，而不是BigEgg.Yolk</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BigEgg</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Egg</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Yolk</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Yolk</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;BigEgg.Yolk()&quot;</span>);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigEgg</span>();<br>  &#125;<br>&#125;<br><span class="hljs-comment">/* Output:</span><br><span class="hljs-comment">New Egg()</span><br><span class="hljs-comment">Egg.Yolk()</span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>EnjoyCoding</category>
      
      <category>Java</category>
      
      <category>OnJava笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>权力的游戏</title>
    <link href="/2024/06/19/EnjoyLife/%E6%9D%83%E5%8A%9B%E7%9A%84%E6%B8%B8%E6%88%8F/%E6%9D%83%E5%8A%9B%E7%9A%84%E6%B8%B8%E6%88%8F/"/>
    <url>/2024/06/19/EnjoyLife/%E6%9D%83%E5%8A%9B%E7%9A%84%E6%B8%B8%E6%88%8F/%E6%9D%83%E5%8A%9B%E7%9A%84%E6%B8%B8%E6%88%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="权力的游戏">1、权力的游戏</h1><p>权游中人名、地名、组织名很多，做点笔记</p><h3 id="人物">1、人物</h3><ul><li><p>史塔克 Stark</p><ul><li><p>奈德：爵士</p></li><li><p>凯特琳：夫人</p></li><li><p>布兰：最小的儿子</p></li><li><p>雪诺：私生子，守夜人</p></li></ul></li><li><p>守夜人</p><ul><li>小恶魔：侏儒，皇后的弟弟，爱看书和pc，说话很哲学</li></ul></li></ul><h3 id="地点">2、地点</h3><ul><li>临冬城 Winter Fell</li></ul><h3 id="国家组织">3、国家/组织</h3><ul><li>守夜人：守护“长城”</li><li>兰尼斯特家族 Lannisters：</li></ul><h3 id="大事记">4、大事记</h3><ul><li>开篇：异人出没，一个守夜人逃回来报信，被斩首（违背守夜人的宣誓）</li><li>Stark家出城探索，捡到5只冰原狼（direwolf），每个Stark家的孩子一只，冰原狼是Stark家族的家徽<ul><li>其实是六只，还有一只红眼白毛的，给了私生子雪诺Snow</li></ul></li><li>御前首相死亡，知道皇后的奸情，可能是被杀</li><li>国王到临冬城请奈德接任御前首相</li><li>龙妈结婚，婚礼上收到三个龙蛋的贺礼</li><li>布兰爬高撞破皇后的奸情，被推下去（未死昏迷，腿残了）</li><li>雪诺送给小女儿一把细剑，缝衣针</li><li>雪诺去长城</li><li>奈德去首都任首相</li></ul><h3 id="句子">5、句子</h3><ul><li>Winter is coming. 凛冬将至</li><li></li></ul>]]></content>
    
    
    <categories>
      
      <category>EnjoyLife</category>
      
      <category>权力的游戏</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>OnJava03--final、多态</title>
    <link href="/2024/06/18/EnjoyCoding/Java/OnJava%E5%9F%BA%E7%A1%80%E5%8D%B7/OnJava03/"/>
    <url>/2024/06/18/EnjoyCoding/Java/OnJava%E5%9F%BA%E7%A1%80%E5%8D%B7/OnJava03/</url>
    
    <content type="html"><![CDATA[<h1 id="onjava03--final多态">OnJava03--final、多态</h1><h3 id="final">1、final</h3><p>可以用在：<strong>数据、方法和类</strong></p><h4 id="final数据">1.1 final数据</h4><p>（1）常量很有用，因为：</p><ul><li>可以是一个永远不会改变的编译时常量 -- 必须是基本类型</li><li>可以是在运行时初始化的值，且不希望它被更改</li></ul><p>（2）对于编译时常量，计算可以在编译时进行，以节省运行时开销。</p><p>（3）final修饰对象引用时，作用是让引用恒定不变，一旦被初始化为一个对象，就不能更改为指向另一个对象（对象本身可以修改）。</p><p>（4）<strong>对final执行赋值操作只能发生在以下地方</strong>，以保证final字段在使用前总是被初始化：</p><ul><li>字段定义处</li><li>构造器中</li><li>静态/非静态初始化代码块</li></ul><p>（5）final参数：方法内部不能修改该参数引用指向的内容</p><h4 id="final方法">1.2 final方法</h4><p>一般出于设计原因，防止继承类重写方法。</p><h4 id="final类">1.3 final类</h4><p>阻止一个类有任何子类。</p><h3 id="多态">2、多态</h3><h4 id="方法调用绑定">2.1 方法调用绑定</h4><p>绑定：将一个方法调用和一个方法体关联起来的动作</p><ul><li>前期绑定：程序运行之前执行绑定 --编译器和链接器实现，C等面向过程语言中是前期绑定</li><li>后期绑定（也叫动态绑定或运行时绑定）：基于对象的类型，运行时才绑定</li></ul><p>关于后期绑定：</p><ul><li>编译器仍不知道对象类型，但方法调用机制能找到正确的方法体</li><li>需要将某种类型信息放在对象里</li><li>Java中除了static或者final（private隐式为final），都是后期绑定<ul><li>final：防止重写，有效地“关闭”了动态绑定</li></ul></li></ul><h4 id="可拓展性">2.2 可拓展性</h4><p>设计良好的OOP程序中，方法尽量遵循：只与基类接口通信。</p><p>这样的程序易于拓展：可以通过继承公共基类来得到新的数据类型，以添加新功能；而操作基类接口的方法不需要任何修改。</p><h4 id="陷阱重写private方法">2.3 陷阱：“重写”private方法</h4><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrivateOverride</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;private f()&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">PrivateOverride</span> <span class="hljs-variable">po</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Derived</span>();<br>    po.f();<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derived</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PrivateOverride</span> &#123;<br>  <span class="hljs-comment">// 此方法并不能重写PrivateOverride里的私有方法f，所以并不是多态场景，main中调用的还是原来的f方法</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span> &#123; System.out.println(<span class="hljs-string">&quot;public f()&quot;</span>); &#125;<br>&#125;<br><span class="hljs-comment">/* Output:</span><br><span class="hljs-comment">private f()</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="陷阱不能在构造函数中调用被子类重写的方法">2.4陷阱：不能在构造函数中调用被子类重写的方法！</h4><figure><imgsrc="https://lics-blogs-1258546254.cos.ap-nanjing.myqcloud.com/images/OnJava/image-20240618213233413.png"alt="不要在构造函数中调用被子类重写的方法" /><figcaptionaria-hidden="true">不要在构造函数中调用被子类重写的方法</figcaption></figure><p>只有基类中的final或private方法可以在构造器中安全调用。</p><h4 id="协变返回类型">2.5 协变返回类型：</h4><p>子类中重写方法的返回值可以是基类方法返回值的子类型。（Java5开始支持）</p><h4 id="继承设计的通用准则">2.6 继承设计的通用准则：</h4><p><strong>用继承表达行为上的差异，用字段表达状态上的变化</strong>。（慢慢感悟）</p>]]></content>
    
    
    <categories>
      
      <category>EnjoyCoding</category>
      
      <category>Java</category>
      
      <category>OnJava笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>OnJava02--控制流、初始化和清理</title>
    <link href="/2024/06/16/EnjoyCoding/Java/OnJava%E5%9F%BA%E7%A1%80%E5%8D%B7/OnJava02/"/>
    <url>/2024/06/16/EnjoyCoding/Java/OnJava%E5%9F%BA%E7%A1%80%E5%8D%B7/OnJava02/</url>
    
    <content type="html"><![CDATA[<h1id="onjava02--控制流初始化和清理">OnJava02--控制流&amp;初始化和清理</h1><h3 id="控制流">1、控制流</h3><ul><li>if-else</li><li>迭代语句<ul><li>while</li><li>do-while</li><li>for</li></ul></li><li>for-in语法（增强for、foreach）：用于数组和容器</li><li>return</li><li>break、continue</li><li>switch<ul><li>Java7之后，switch的选择器添加了使用字符串的能力</li></ul></li></ul><h3 id="初始化和清理">2、初始化和清理</h3><h3 id="用构造器保证初始化">2.1、用构造器保证初始化</h3><h3 id="方法重载">2.2、方法重载</h3><ul><li><strong>方法重载对于构造器是必须的</strong>：不同的构造器必须要有相同的名字--类名，如果要实现具有不同参数类型、个数的构造器，就必须要有方法重载。</li><li>使用基本类型的重载：<ul><li>如果有重载方法的参数与传入数据的基本类型一样，则调用该方法</li><li>如果传入数据的类型小于方法中的参数类型，数据会被提升</li><li>如果传入数据的类型比方法参数的类型更宽，则需要显示<strong>窄化转型</strong>，否则编译报错。</li></ul></li></ul><h3 id="this关键字">2.3、this关键字</h3><h5 id="基本概念">（1）基本概念：</h5><ul><li>类的方法其实都有一个隐藏参数，位于所有显式参数之前，代表着被操作对象的引用</li><li>this：用来在一个方法里获得对当前对象的引用</li><li>this只能用于非静态方法中</li><li>可以用于return语句，返回对当前对象的引用，实现对同一对象执行多个操作</li></ul><h5id="使用this实现在构造器中调用构造器">（2）使用this实现在构造器中调用构造器：</h5><ul><li>目的：减少代码重复</li><li><strong>不能同时调用两个</strong></li><li><strong>构造器调用必须出现在方法的最开始部分</strong>，否则编译报错（侧面解释了为何不能调两个：第二个调用不在最开始部分了）</li><li>禁止在非构造器的普通方法里调用构造器</li></ul><h3 id="清理">2.4、清理</h3><ul><li>你的对象可能不会被垃圾收集</li><li>垃圾收集不是析构</li><li>垃圾收集仅与内存有关</li></ul><h5 id="finalize">（1）finalize()</h5><ul><li>必须与内存及其释放相关</li><li>使用仅限于：对象以某种方式分配存储空间，而不是通过创建对象来分配<ul><li>Java中一切都是对象，上述分配主要通过<strong>本地方法</strong>来实现，即Java中调用非Java代码，在非Java代码中分配存储空间。</li></ul></li></ul><h3 id="初始化">2.5、初始化</h3><ul><li><p>static初始化仅在必要时发生：如果不创建对应class的对象，则该class中的静态字段就不会被创建。</p><ul><li>仅在第一个对象创建或第一次访问静态数据时被初始化</li></ul></li><li><p>顺序：先静态字段，后非静态字段</p></li><li><p>显式静态初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Obj</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">static</span> &#123;<br>        i = <span class="hljs-number">47</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>非静态实例初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Obj</span> &#123;<br>    <span class="hljs-type">int</span> i;<br>    &#123;<br>        i = <span class="hljs-number">47</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>实例初始化子句在构造器之前执行。</strong></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>EnjoyCoding</category>
      
      <category>Java</category>
      
      <category>OnJava笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>小仙女的十万个放屁理由</title>
    <link href="/2024/06/15/EnjoyLife/lcstt/%E5%B0%8F%E4%BB%99%E5%A5%B3%E7%9A%84%E5%8D%81%E4%B8%87%E4%B8%AA%E6%94%BE%E5%B1%81%E7%90%86%E7%94%B1/"/>
    <url>/2024/06/15/EnjoyLife/lcstt/%E5%B0%8F%E4%BB%99%E5%A5%B3%E7%9A%84%E5%8D%81%E4%B8%87%E4%B8%AA%E6%94%BE%E5%B1%81%E7%90%86%E7%94%B1/</url>
    
    <content type="html"><![CDATA[<h1 id="小仙女的十万个放屁理由">小仙女的十万个放屁理由</h1><p>记录一下宝贝老婆的放屁理由，持续更新😍</p><ul><li>拉肚子后遗症</li><li>吃完桃就是这样</li><li>你摸我吓的</li><li>刚醒</li><li>...</li></ul>]]></content>
    
    
    <categories>
      
      <category>EnjoyLife</category>
      
      <category>lcstt</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>OnJava00--Java与C++的区别</title>
    <link href="/2024/06/15/EnjoyCoding/Java/OnJava%E5%9F%BA%E7%A1%80%E5%8D%B7/OnJava00-Java%E4%B8%8EC++%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2024/06/15/EnjoyCoding/Java/OnJava%E5%9F%BA%E7%A1%80%E5%8D%B7/OnJava00-Java%E4%B8%8EC++%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="onjava00--java与c的区别">OnJava00--Java与C++的区别</h1><h3 id="前言">1、前言</h3><p>《OnJava》书中很多地方作者都琐碎地比较了Java与C++的差异点，特此单独用一篇笔记记录。</p><h3 id="java与c的区别">2、Java与C++的区别</h3><h5 id="是否有基类">（1）是否有基类：</h5><ul><li>Java的所有类都继承自Object --<strong>单根层次结构</strong>，有利于实现垃圾收集器</li><li>C++无法确保所有对象都属于一个基类</li></ul><h5 id="垃圾回收">（2）垃圾回收：</h5><ul><li>C++必须在编码时就明确何时销毁对象，否则会造成内存泄漏</li><li>Java底层支持垃圾收集器，会自动找到无用的对象并将其销毁</li></ul><h5 id="传值和传引用">（3）传值和传引用</h5><ul><li>C++支持传值，也支持传引用</li><li>Java中只有传值，对于对象的引用，参数传递的是引用的一份复制，所以方法中修改引用所指向的对象，在方法结束后并不生效</li></ul><h5 id="寄存器">（4）寄存器</h5><ul><li>C/C++允许向编译器申请分配寄存器，而Java不能直接控制寄存器的分配。</li></ul><h5 id="基本类型的默认值">（5）基本类型的默认值</h5><ul><li>对于基本类型的局部变量，如果未赋值，Java会抛出编译错误，而C++编译器通常只是告警</li></ul><h5 id="运算符重载">（6）运算符重载</h5><ul><li>Java：不支持（只有String可以+和+=）</li><li>C++：支持</li></ul><h5 id="java没有sizeof">（7）Java没有sizeOf</h5><ul><li>C/C++中，sizeof()操作符返回数据项分配的字节数，因为相同的数据类型在不同机器上可能有不同的大小。</li><li>Java所有的数据类型在所有机器中的大小都相同，所以不需要sizeof</li></ul><h5id="java的finalize与c的析构函数">（8）Java的finalize()与C++的析构函数</h5><ul><li>C++的析构函数，在对象被销毁时总是会被调用</li><li>而Java中，对象并不总是被垃圾收集。</li></ul><h5 id="数组越界">（9）数组越界</h5><ul><li>C/C++：越界时会默默接受，并允许你访问所有内存</li><li>Java：抛出运行时异常</li></ul>]]></content>
    
    
    <categories>
      
      <category>EnjoyCoding</category>
      
      <category>Java</category>
      
      <category>OnJava笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>OnJava01--面向对象基础 &amp; 操作符</title>
    <link href="/2024/06/15/EnjoyCoding/Java/OnJava%E5%9F%BA%E7%A1%80%E5%8D%B7/OnJava01/"/>
    <url>/2024/06/15/EnjoyCoding/Java/OnJava%E5%9F%BA%E7%A1%80%E5%8D%B7/OnJava01/</url>
    
    <content type="html"><![CDATA[<h1 id="onjava01-面向对象基础-操作符">OnJava01-面向对象基础 &amp;操作符</h1><h3 id="对象无处不在">1、对象无处不在</h3><h4 id="数据保存在哪">1.1、数据保存在哪</h4><h5 id="寄存器">（1）寄存器</h5><p>速度最快的数据存储方式，直接包存在CPU里。数量很有限，只能按需分配。Java中不能直接控制寄存器的分配。</p><h5 id="栈stack">（2）栈（Stack）</h5><ul><li>数据存储在随机存取存储器（RAM）里，处理器可以通过<strong>栈指针</strong>直接操作该数据。</li><li>效率仅次于寄存器。</li><li>Java在创建程序时就要明确栈上所有对象的生命周期，约束了程序的灵活性，因此对象引用（但不仅是对象引用）会保存在栈上，而对象本身不在。</li></ul><h5 id="堆heap">（3）堆（Heap）</h5><ul><li>通用的内存池，也存储在RAM空间</li><li>用于存放所有Java对象</li><li>堆的使用非常灵活，可以随时new对象，Java会在堆上为该对象分配内存空间</li><li>灵活的代价：分配和清理堆存储要比栈存储花费更多的时间--如今Java的堆内存分配机制已经非常高效，不需过度关注此问题</li></ul><h5 id="常量存储">（4）常量存储</h5><ul><li>常量通常直接保存在程序代码中，因为值不会改变</li></ul><h5 id="非ram存储">（5）非RAM存储</h5><p>未保存在应用程序中的数据。典型例子：</p><ul><li>序列化对象：转换为字节流，并可以发送到其他机器的对象</li><li>持久化对象：磁盘上的对象，JDBC、Hibernate等</li></ul><h4 id="特殊情况基本类型">1.2 特殊情况：基本类型</h4><p>对于基本类型，Java是直接创建一个“自动变量”，而<strong>不是引用</strong>，该变量会直接在栈上保存它的值。运行效率也较高。</p><h4 id="无需销毁对象">1.3 无需销毁对象</h4><h5 id="作用域">（1）作用域</h5><ul><li>C/C++、Java的作用域范围都是通过大括号{} 来定义的。</li><li>Java中不允许在外围的作用域中“隐藏”变量：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs java">&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br>    &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">96</span>; <span class="hljs-comment">// 语法错误</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="对象的作用域">（2）对象的作用域</h5><ul><li><p>Java对象在其作用域结束后可能会依然存在。</p></li><li><p>垃圾收集器会监视所有通过new创建的对象，及时发现不再引用的对象，并释放所占用的内存。</p></li></ul><h3 id="基本类型的默认值">1.4 基本类型的默认值</h3><ul><li>当变量作为类的成员存在时，Java才会初始化为该变量对应的基本类型的默认值</li><li><strong>默认值机制不会应用于局部变量</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> x;<br>System.out.println(x); <span class="hljs-comment">// 编译错误：java: 可能尚未初始化变量x</span><br></code></pre></td></tr></table></figure><h3 id="操作符">2、操作符</h3><h4 id="java操作符">2.1 Java操作符</h4><ul><li>几乎所有操作符都只能操作基本类型，例外的是 = 、==、 !=也能操作对象</li><li>String类型也支持 + 和 +=</li></ul><h4 id="赋值">2.2 赋值（=）</h4><ul><li><p>基本类型的赋值：将一个地方的内容复制到另一个地方，a =b就是b的内容复制给a，赋值后修改a并不会影响b</p></li><li><p>对象的赋值：真正操作的是对象的引用，将一个对象赋值给另一对象，实际是将引用复制到另一个地方；c= d就是将c、d都指向d的对象。</p><ul><li>这种现象称作“别名”，需要注意，<strong>将对象作为参数传递给方法时，也会产生别名</strong>！</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Letter</span> &#123;<br>  <span class="hljs-type">char</span> c;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PassObject</span> &#123;<br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">(Letter y)</span> &#123;<br>    y.c = <span class="hljs-string">&#x27;z&#x27;</span>;<br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Letter</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Letter</span>();<br>    x.c = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    System.out.println(<span class="hljs-string">&quot;1: x.c: &quot;</span> + x.c);<br>    f(x); <span class="hljs-comment">// f方法内修改了x.c的值，实际改变了f()之外的对象</span><br>    System.out.println(<span class="hljs-string">&quot;2: x.c: &quot;</span> + x.c);<br>  &#125;<br>&#125;<br><span class="hljs-comment">/* Output:</span><br><span class="hljs-comment">1: x.c: a</span><br><span class="hljs-comment">2: x.c: z</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="算术操作符--">2.3 算术操作符（+ - * / %）</h4><ul><li>整数的除法会舍弃小数位，非四舍五入</li><li>支持快捷运算符，即 +=、 -=、*=、/=、%=</li></ul><h4 id="自动递增自动递减--">2.4 自动递增、自动递减（++、--）</h4><ul><li>前缀式、后缀式：先执行运算再生成结果还是相反</li><li>是有副作用的操作符：会改变操作数</li></ul><h4 id="关系运算符">2.5关系运算符（&lt;、&gt;、&lt;=、&gt;=、==、!=）</h4><h5 id="测试对象是否相等">测试对象是否相等：</h5><ul><li>== 和 != 比较的是对象的引用</li><li>对于Integer对象的 == 比较：<ul><li>Java中会通过享元模式来缓存 -128 ~ 127内的对象，所以多次调用Integer.valueOf此范围内的整数，得到的是同一个对象</li><li>new Integer() 生成的对象都是新创建的，无论什么范围</li></ul></li></ul><h4 id="位操作符">2.6 位操作符</h4><p>用来操作整数基本数据类型中的单个二进制位(bit)。</p><ul><li>按位与：&amp;</li><li>按位或：|</li><li>按位异或： ^</li><li>按位非(一元操作符，只对一个操作数操作)：~</li></ul><p>布尔类型：</p><ul><li>支持&amp;、|、^，但不支持~（可能是为了避免与!混淆）</li><li>按位操作布尔值时，不会“短路”</li></ul><h4 id="移位操作符">2.7 移位操作符</h4><p>只能用来处理基本类型中的整数类型。</p><ul><li>&lt;&lt; ：左移，低位补0</li><li>&gt;&gt; ：右移，符号扩展，符号为正，高位插入0，否则插入1</li><li>&gt;&gt;&gt;： 无符号的右移，零扩展</li></ul><h4 id="类型转换">2.8 类型转换</h4><h5 id="截尾和舍入">（1）截尾和舍入</h5><ul><li>执行窄化转型（eg. float -&gt; int）时，Java做的是截尾操作（29.7-&gt; int 是29，而不是四舍五入后的30）</li><li>舍入需要使用round()方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Math.round(<span class="hljs-number">0.7f</span>);<br></code></pre></td></tr></table></figure><h5 id="提升">（2）提升</h5><ul><li>对小于int类型的基本数据类型（char byteshort）执行算术运算或按位运算时，<strong>运算执行前就会将值自动提升为int</strong>，结果也是int类型。如果要把结果赋值回较小的类型，需要使用强制类型转换。</li><li>表达式里出现的最大的数据类型决定了表达式最终结果的数据类型（eg，int+ long -&gt; long）</li></ul>]]></content>
    
    
    <categories>
      
      <category>EnjoyCoding</category>
      
      <category>Java</category>
      
      <category>OnJava笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>maven入门笔记03--执行Maven的构建命令&amp;创建Maven的Web工程&amp;依赖的范围</title>
    <link href="/2022/09/12/EnjoyCoding/JavaWeb/Maven/maven03/"/>
    <url>/2022/09/12/EnjoyCoding/JavaWeb/Maven/maven03/</url>
    
    <content type="html"><![CDATA[<h1id="maven入门03-实验二执行maven的构建命令">Maven入门03-实验二（执行Maven的构建命令）</h1><h3 id="要求">1. 要求</h3><p>运行Maven中和构建相关的命令时，必须进入到pom.xml所在的目录。如果没有在pom.xml所在的目录运行，会看到下面的错误提示：</p><figure class="highlight text"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs text">The goal you specified requires a project to execute but there is no POM in this directory<br></code></pre></td></tr></table></figure><h3 id="清理操作">2. 清理操作</h3><p>mvn clean</p><p>效果：删除target目录</p><h3 id="编译操作">3. 编译操作</h3><ul><li>主程序编译：mvn compile</li><li>测试程序编译：mvn test-compile</li><li>主体程序编译结果存放的目录：target/classes</li><li>测试程序编译结果存放的目录：target/test-classes</li></ul><h3 id="测试操作">4. 测试操作</h3><p>mvn test</p><p>执行时会经历以下各个生命周期：resources、compile、testResources、testCompile、test</p><figure><imgsrc="https://lics-blogs-1258546254.cos.ap-nanjing.myqcloud.com/images/Spring/maven03-mvnTestRunning.png"alt="image-20220912195049163" /><figcaption aria-hidden="true">image-20220912195049163</figcaption></figure><p>测试报告的存放目录：target-reports</p><h3 id="打包操作">5. 打包操作</h3><p>mvn package</p><p>打包的结果--jar/war包，存放的目录：target</p><h3 id="安装操作">6. 安装操作</h3><p>mvn install</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">[INFO] Installing D:\codes\maven-workspace\pro01-maven-java\target\pro01-maven-java-1.0-SNAPSHOT.jar to D:\envs\maven-repo\com\lics\maven\pro01-maven-java\1.0-SNAPSHOT\pro01-maven-java-1.0-SNAPSHOT.jar<br>[INFO] Installing D:\codes\maven-workspace\pro01-maven-java\pom.xml to D:\envs\maven-repo\com\lics\maven\pro01-maven-java\1.0-SNAPSHOT\pro01-maven-java-1.0-SNAPSHOT.pom<br></code></pre></td></tr></table></figure><p>安装的效果：</p><ul><li>将本地构建过程中生成的jar包存入maven本地仓库。</li><li>将pom.xml文件转换为XXX.pom文件一起存入本地仓库。（只是名字改变，本质上是同一个文件）</li></ul><h1id="maven入门03-实验三创建maven的web工程">Maven入门03-实验三（创建Maven的Web工程）</h1><h3 id="说明">1. 说明</h3><p>使用mvnarchetype:generate命令生成Web工程时，需要使用一个专门的archetype：<font color='cornflowerblue'>maven-archetype-webapp</font></p><p>生成的简单的webapp项目结构：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml">project<br>|-- pom.xml<br>`-- src<br>    `-- main<br>        `-- webapp<br>            |-- WEB-INF<br>            |   `-- web.xml<br>            `-- index.jsp<br></code></pre></td></tr></table></figure><p>用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn archetype:generate -D archetypeGroupId=org.apache.maven.archetypes -D archetypeArtifactId=maven-archetype-webapp -D archetypeVersion=1.4<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>EnjoyCoding</category>
      
      <category>JavaWeb</category>
      
      <category>Maven</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>maven入门笔记02--根据坐标创建Maven工程</title>
    <link href="/2022/09/04/EnjoyCoding/JavaWeb/Maven/maven02/"/>
    <url>/2022/09/04/EnjoyCoding/JavaWeb/Maven/maven02/</url>
    
    <content type="html"><![CDATA[<h1id="maven入门02-实验一根据坐标创建maven工程">Maven入门02-实验一（根据坐标创建Maven工程）</h1><h3 id="maven核心概念坐标">1. Maven核心概念：坐标</h3><h4 id="数学中的坐标">① 数学中的坐标：</h4><p>以三维空间坐标系为例，使用x、y、z三个向量，可以在空间中唯一的定位到一个点。</p><h4 id="maven中的坐标">② Maven中的坐标</h4><h5 id="向量说明">[1] 向量说明</h5><p>使用三个<font color='cornflowerblue'>向量</font>在<font color='cornflowerblue'>Maven的仓库</font>中<font color='cornflowerblue'>唯一</font>的定位到一个<font color='cornflowerblue'>jar</font>包。</p><ul><li><font color='cornflowerblue'>groupId</font>：公司或组织的id</li><li><font color='cornflowerblue'>artifactId</font>：一个项目或者是项目中的一个模块的id</li><li><font color='cornflowerblue'>version</font>：版本号</li></ul><h5 id="三个向量的取值方式">[2] 三个向量的取值方式</h5><ul><li>groupId：公司或者组织域名的倒序，通常也会加上项目名称<ul><li>例如：com.lics.helloMaven</li></ul></li><li>artifactId：模块的名称，将来作为Maven工程的工程名<ul><li>例如：pro01-lics-maven</li></ul></li><li>version：模块的版本号，根据需要设定<ul><li>例如：SNAPSHOT表示快照版本，正在迭代过程中，不稳定的版本</li><li>例如：RELEASE表示正式版本</li></ul></li></ul><h3 id="坐标和仓库中jar包的存储路径之间的对应关系">2.坐标和仓库中jar包的存储路径之间的对应关系</h3><p>坐标：</p><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br></code></pre></td></tr></table></figure><p>对应的jar包在maven本地仓库中的位置：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">$&#123;maven本地仓库根目录&#125;$\javax\servlet\javax.servlet-api\4.0.1\javax.servlet-api-4.0.1.jar<br></code></pre></td></tr></table></figure><h3 id="实验操作">3. 实验操作</h3><h4 id="创建目录作为后面操作的工作空间">①创建目录作为后面操作的工作空间</h4><p>例如：D:-workspace</p><div class="notice"><p>此时我们已经有了三个目录，分别是：</p><ul><li>Maven核心程序：中军大帐</li><li>Maven本地仓库：兵营</li><li>本地工作空间：战场</li></ul></div><h4 id="在工作空间目录下打开cmd">② 在工作空间目录下打开cmd</h4><h4 id="使用命令生成maven工程">③ 使用命令生成Maven工程</h4><p>运行 <font color='cornflowerblue'><strong>mvnarchetype:generate</strong></font> 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">Choose a number or apply filter (format: [groupId:]artifactId, <span class="hljs-keyword">case</span> sensitive contains): 7: 【默认值，7代表quickstart】<br>Define value <span class="hljs-keyword">for</span> property <span class="hljs-string">&#x27;groupId&#x27;</span>: com.lics.maven<br>Define value <span class="hljs-keyword">for</span> property <span class="hljs-string">&#x27;artifactId&#x27;</span>: pro01-maven-java<br>Define value <span class="hljs-keyword">for</span> property <span class="hljs-string">&#x27;version&#x27;</span> 1.0-SNAPSHOT: :【默认版本号】<br>Define value <span class="hljs-keyword">for</span> property <span class="hljs-string">&#x27;package&#x27;</span> com.lics.maven: :<br></code></pre></td></tr></table></figure><h4 id="调整">④ 调整</h4><p>Maven默认依赖的是较低的junit版本3.8.1，可以改成较合适的4.12版本。</p><p>自动生成的App.java和AppTest.java可以删除。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 依赖信息配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 通过坐标来依赖其他的jar包 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- 依赖的范围 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="自动生成的pom.xml解读">⑤ 自动生成的pom.xml解读</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- project标签: 根标签, 表示对当前工程进行配置、管理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- modelVersion标签: 从maven 2开始就固定是4.0.0 --&gt;</span><br>  <span class="hljs-comment">&lt;!-- 代表当前 pom.xml 所采用的标签结构 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- gav 坐标信息 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lics.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pro01-maven-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- packaging标签: 打包方式 --&gt;</span><br>  <span class="hljs-comment">&lt;!-- 取值jar: 生成jar包, 说明这是一个 Java 工程 --&gt;</span><br>  <span class="hljs-comment">&lt;!-- 取值war: 生成war包, 说明这是一个 Web 工程 --&gt;</span><br>  <span class="hljs-comment">&lt;!-- 取值pom: 说明这个工程是用来管理其他工程的工程 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>pro01-maven-java<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.apache.org<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 在Maven中定义属性值 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 在构建过程中读取源码时使用的字符集 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- dependencies标签: 配置具体的依赖信息, 可以包含多个 dependency 子标签 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- dependency标签: 配置一个具体的依赖信息 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 坐标信息 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>      <span class="hljs-comment">&lt;!-- scope标签: 当前依赖的范围 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="maven核心概念pom">4. Maven核心概念：POM</h3><h4 id="含义">① 含义</h4><p>POM：<font color='cornflowerblue'>P</font>roject<font color='cornflowerblue'>O</font>bject<font color='cornflowerblue'>M</font>odel，项目对象模型。和POM类似的是：DOM(DocumentObject Model)，文档对象模型。它们都是模型化思想的具体体现。</p><h4 id="模型化思想">② 模型化思想</h4><p>POM表示将工程抽象为一个模型，再用程序中的对象来描述这个模型。这样我们就可以用程序来管理项目了。在开发过程中，最基本的做法就是将现实中的事物抽象为模型，然后封装模型相关的数据作为一个对象，在程序中计算与现实事物相关的数据。</p><h4 id="对应的配置文件">③ 对应的配置文件</h4><p>POM理念集中体现在Maven工程根目录下pom.xml这个配置文件中。所以这个pom.xml配置文件就是Maven工程的核心配置文件。学习Maven就是学习这个文件怎么配置，各个配置有什么用。</p><h3 id="maven核心概念约定的目录结构">5.Maven核心概念：约定的目录结构</h3><h4 id="各个目录的作用">① 各个目录的作用</h4><p><img src="https://lics-blogs-1258546254.cos.ap-nanjing.myqcloud.com/images/Spring/maven02-folderStruct" width="50%" style="center"/></p><p>另外还有一个target目录专门存放构建操作输出的结果。</p><h4 id="约定目录结构的意义">② 约定目录结构的意义</h4><p>为了构建过程能尽可能地自动化，必须约定目录结构的作用。例如：Maven执行编译操作，必须先去Java源码目录读取Java源代码，然后把编译结果放在target目录。</p><h4 id="约定大于配置">③ 约定大于配置</h4><p>开发领域的技术发展趋势：约定大于配置，配置大于编码。</p><p>Maven对于目录结构这个问题，没有采用配置的方式，而是基于约定。这样在开发过程中非常方便。</p>]]></content>
    
    
    <categories>
      
      <category>EnjoyCoding</category>
      
      <category>JavaWeb</category>
      
      <category>Maven</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>maven入门笔记01--简介</title>
    <link href="/2022/09/04/EnjoyCoding/JavaWeb/Maven/maven01/"/>
    <url>/2022/09/04/EnjoyCoding/JavaWeb/Maven/maven01/</url>
    
    <content type="html"><![CDATA[<h1 id="maven入门01--简介">Maven入门01--简介</h1><p>Maven是Apache组织维护的一款专门为Java项目提供<strong>构建</strong>和<strong>依赖</strong>管理支持的工具。</p><h3 id="什么是maven">什么是Maven</h3><h4 id="构建">1. 构建</h4><p>Java项目开发中，构建指的是使用<strong>原材料</strong>生产<strong>产品</strong>的过程。</p><ul><li>原材料<ul><li>Java源代码</li><li>基于HTML的Thymeleaf文件</li><li>图片</li><li>配置文件</li><li>......</li></ul></li><li>产品<ul><li>一个可以在服务器上运行的项目</li></ul></li></ul><p>构建过程包含的主要环节：</p><ul><li>清理：删除上一次构建的结果，为下一次构建做准备</li><li>编译：Java源程序编译成*.class文件</li><li>测试：运行提前准备好的测试程序（针对特定功能点的Junit）</li><li>报告：针对刚才测试的结果生成一个全面的信息</li><li>打包：<ul><li>java工程：jar包</li><li>web工程：war包</li></ul></li><li>安装：把一个Maven工程经过打包操作生成的jar包或war包存入Maven仓库</li><li>部署：<ul><li>部署jar包：把一个jar包部署到Nexus私服服务器上</li><li>部署war包：借助相关Maven插件（例如cargo），将war包部署到Tomcat服务器上</li></ul></li></ul><h3 id="依赖">2. 依赖</h3><p>如果A工程里用到了B工程的类、接口、配置文件等资源，就可以说A依赖B。</p><p>依赖管理过程中要解决的具体问题：</p><ul><li>jar包的下载：使用Maven之后，jar包会从规范的远程仓库下载到本地</li><li>jar包之间的依赖：通过依赖的传递性自动完成</li><li>jar包之间的冲突：通过对依赖的配置进行调整，让某些jar包不被导入</li></ul><h3 id="maven的工作机制">3. Maven的工作机制</h3><p><img src="https://lics-blogs-1258546254.cos.ap-nanjing.myqcloud.com/images/Spring/Maven01_%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6.png" width="80%" style="center"/></p><h3 id="解压maven核心程序">4. 解压Maven核心程序</h3><p>核心程序压缩包：apache-maven-3.8.6-bin.zip，解压到<strong>非中文、没有空格</strong>的目录。</p><p>在解压目录中，重点关注Maven的核心配置文件：<strong>conf/settings.xml</strong></p><h3 id="指定本地仓库">5. 指定本地仓库</h3><p>本地仓库默认值：${user.home}/.m2/repository。由于本地仓库的默认位置是在用户的家目录（windows下通常在C盘）。将来Maven仓库中jar包越来越多，仓库体积越来越大，可能会拖慢C盘运行速度，影响系统性能。所以建议将Maven的本地仓库放在其他盘符下。配置方式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- localRepository</span><br><span class="hljs-comment">   | The path to the local repository maven will use to store artifacts.</span><br><span class="hljs-comment">   |</span><br><span class="hljs-comment">   | Default: $&#123;user.home&#125;/.m2/repository</span><br><span class="hljs-comment">  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span><br><span class="hljs-comment">  --&gt;</span><br><span class="hljs-comment">&lt;!-- 配置Maven本地仓库 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>D:\envs\maven-repo<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="配置阿里云提供的镜像仓库">6. 配置阿里云提供的镜像仓库</h3><p>Maven下载jar包默认访问境外的中央仓库，而国外网站速度很慢。改成阿里云提供的镜像仓库，访问国内网站，可以让maven下载jar包的时候速度更快。配置的方式是：将下面mirror标签复制到settings.xml文件的mirrors标签的内部。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>aliyunmaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="配置maven工程的基础jdk版本">7. 配置Maven工程的基础JDK版本</h3><p>如果按照默认配置运行，java工程默认的JDK版本是1.5，而常用的是1.8版本。需要将下述内容放在settings.xml文件的profiles标签的内部。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>jdk-1.8<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdk</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">jdk</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>EnjoyCoding</category>
      
      <category>JavaWeb</category>
      
      <category>Maven</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring笔记03--AOP</title>
    <link href="/2022/06/28/EnjoyCoding/JavaWeb/Spring/Spring03/"/>
    <url>/2022/06/28/EnjoyCoding/JavaWeb/Spring/Spring03/</url>
    
    <content type="html"><![CDATA[<h1 id="spring笔记03--aop">Spring笔记03--AOP</h1><h3 id="代理模式">1. 代理模式</h3><p>代理模式就是Spring AOP的底层！</p><p>代理模式的分类：</p><ul><li>静态代理</li><li>动态代理</li></ul><h3 id="aop">2. AOP</h3><h4 id="什么是aop">2.1 什么是AOP</h4><p>AOP（Aspect OrientedProgramming），面向切面编程。通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。</p><p><img src="https://lics-blogs-1258546254.cos.ap-nanjing.myqcloud.com/images/Spring/03-01-AOP-example.png" width="80%" style="center"/></p><h4 id="aop在spring中的作用">2.2 AOP在Spring中的作用</h4><p>提供声明式事务，允许用户自定义切面。</p><p><img src="https://lics-blogs-1258546254.cos.ap-nanjing.myqcloud.com/images/Spring/03-02-AOP-usage.png" width="80%" style="center"/></p><h4 id="使用spring实现aop">2.3 使用Spring实现AOP</h4><p>【重点】使用AOP，需要导入一个依赖包：</p><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>方式一：使用Spring的API接口 【主要是SpringAPI接口实现】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/aop</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 注册bean --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lics.service.UserServiceImpl&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;log&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lics.log.Log&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;logAfter&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lics.log.LogAfter&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置aop --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 切入点 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pointcut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.lics.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 执行环绕增加！ --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;log&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointcut&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;logAfter&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointcut&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.aop.MethodBeforeAdvice;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Log</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MethodBeforeAdvice</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">(Method method, Object[] args, Object target)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(target.getClass().getName() + <span class="hljs-string">&quot;的&quot;</span> + method.getName() + <span class="hljs-string">&quot;被执行了&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>方式二：自定义实现AOP【主要是切面定义】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;diy&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lics.diy.DiyPointCut&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 自定义切面， ref 要引用的类--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;diy&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 切入点 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;point&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.lics.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 通知 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;before&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;point&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;after&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;point&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><p>方式三：使用注解实现</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;annotationPointCut&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lics.diy.AnnotationPointCut&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 开启注解支持 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>/&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Before(&quot;execution(* com.lics.service.UserServiceImpl.*(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;*********方法执行前********&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@After(&quot;execution(* com.lics.service.UserServiceImpl.*(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;*********方法执行后********&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@Around(&quot;execution(* com.lics.service.UserServiceImpl.*(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>    System.out.println(<span class="hljs-string">&quot;*********环绕前********&quot;</span>);<br>    joinPoint.proceed();<br>    System.out.println(<span class="hljs-string">&quot;*********环绕后********&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>EnjoyCoding</category>
      
      <category>JavaWeb</category>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring笔记02--自动装配&amp;注解开发</title>
    <link href="/2022/06/28/EnjoyCoding/JavaWeb/Spring/Spring02/"/>
    <url>/2022/06/28/EnjoyCoding/JavaWeb/Spring/Spring02/</url>
    
    <content type="html"><![CDATA[<h1id="spring笔记02--自动装配注解开发">Spring笔记02--自动装配&amp;注解开发</h1><h3 id="bean的自动装配">1. bean的自动装配</h3><ul><li>自动装配是Spring满足bean依赖的一种方式！</li><li>Spring会在上下文中自动寻找，并自动给bean装配属性！</li></ul><p>在Spring中有三种装配的方式：</p><ol type="1"><li>在xml中显示地配置</li><li>在java中显示地配置</li><li>隐式地自动装配【重要】</li></ol><h4 id="byname自动装配">1.1 byName自动装配</h4><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">byName: 会自动在容器上下文中查找，和自己对象set方法后面的值对应的bean id！</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;person&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lics.pojo.Person&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;lics&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="bytype自动装配">1.2 byType自动装配</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lics.pojo.Cat&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lics.pojo.Dog&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">byName: 会自动在容器上下文中查找，和自己对象set方法后面的值对应的bean id！</span><br><span class="hljs-comment">byType: 会自动在容器上下文中查找，和自己对象属性类型相同的bean！</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;person&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lics.pojo.Person&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byType&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;lics&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>小结：</p><ul><li>byName时，需要保证所有bean的id唯一，且这个bean需要和自动注入属性的set方法的值一致！</li><li>byType时，需要保证所有bean的class唯一，且这个bean需要和自动注入属性的类型一致！</li></ul><h4 id="使用注解实现自动装配">1.3 使用注解实现自动装配</h4><p>要使用注解须知：</p><ol type="1"><li>导入约束： context约束</li><li>配置注解的支持： <context:annotation-config/></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p><span class="citation"data-cites="Autowired">@Autowired</span>：可以用在属性名上，或set方法上，<strong>且通过byType的方式实现</strong></p></li><li><p>若自动装配无法通过一个@Autowired注解完成时，可以使用 <spanclass="citation" data-cites="Qualifier">@Qualifier</span>(value = "xxx")配合，指定一个唯一的bean对象注入！</p></li></ul><h3 id="使用注解开发">2. 使用注解开发</h3><ul><li><span class="citation"data-cites="Component">@Component</span>：组件，放在类上，说明这个类被Spring管理了，就是bean！</li><li><span class="citation"data-cites="Value">@Value</span>：注入属性</li><li><span class="citation" data-cites="Scope">@Scope</span>：作用域</li></ul><h3 id="使用java的方式配置spring">3. 使用Java的方式配置Spring</h3><p>JavaConfig是Spring的一个子项目，在Spring 4之后，成为了一个核心功能！</p>]]></content>
    
    
    <categories>
      
      <category>EnjoyCoding</category>
      
      <category>JavaWeb</category>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring笔记01--简介&amp;依赖注入&amp;bean的作用域</title>
    <link href="/2022/06/26/EnjoyCoding/JavaWeb/Spring/Spring01/"/>
    <url>/2022/06/26/EnjoyCoding/JavaWeb/Spring/Spring01/</url>
    
    <content type="html"><![CDATA[<h1id="spring笔记01--简介依赖注入bean的作用域">Spring笔记01--简介&amp;依赖注入&amp;bean的作用域</h1><h3 id="spring">1. Spring</h3><h4 id="简介">1.1 简介</h4><p>官网：https://spring.io/projects/spring-framework#overview</p><p>github：https://github.com/spring-projects/spring-framework</p><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.21<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="优点">1.2 优点</h4><ul><li>Spring是一个开源、免费的框架（容器）！</li><li>Spring是一个轻量级的、非入侵式的框架！</li><li>控制反转（IOC），面向切面编程（AOP）！</li><li>支持事务的处理，对框架整合的支持！</li></ul><h4 id="组成">1.3 组成</h4><p><img src="https://lics-blogs-1258546254.cos.ap-nanjing.myqcloud.com/images/Spring/Spring01-01-7modules.jpg" width="80%" style="center"/></p><h3 id="ioc理论">2. IOC理论</h3><p>之前：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImpl</span>();<br></code></pre></td></tr></table></figure><p>利用set进行动态实现值的注入:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserDao</span><span class="hljs-params">(UserDao userDao)</span> &#123;<br>    <span class="hljs-built_in">this</span>.userDao = userDao;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>之前，程序主动创建对象，控制权在程序员手上；用户变更需求后，需要修改原来的代码</li><li>使用了set注入后，程序不再具有主动性，而是被动地接受对象！</li></ul><p>这种思想，从本质上解决了问题，程序员不需要再去管理对象的创建！系统的耦合性大大降低，可以更加专注于业务的实现。这就是IOC的原型。</p><h3 id="ioc创建对象的方式">3. IOC创建对象的方式</h3><ol type="1"><li><p>使用无参构造创建对象，默认！</p></li><li><p>若需要用有参构造创建对象，方法：</p><ul><li><p>第一种：下标赋值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 有参构造第一种： 下标赋值 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lics.pojo.User&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;lics&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>第二种：类型匹配 【不建议使用】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 有参构造第一种： 下标赋值 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lics.pojo.User&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;lics-type&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>第三种：参数名 【通常使用】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lics.pojo.User&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;lics-arg-name&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>在配置文件加载的时候，容器中管理的对象就已经初始化了，无论是否使用。</p></li></ol><h3 id="spring配置">4. Spring配置</h3><h4 id="别名">4.1 别名</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 如果添加了别名，也可以通过别名获取到这个bean --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">alias</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;userNew&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h4 id="bean的配置">4.2 Bean的配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    id：bean的唯一标识符</span><br><span class="hljs-comment">    class：bean对象所对应的全限定名：包名+类型</span><br><span class="hljs-comment">    name：也是别名，且name可以同时取多个别名</span><br><span class="hljs-comment"> --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userNew&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lics.pojo.User&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user2 u2,u3;u4&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;lics-type&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="import">4.3 import</h4><p>一般用于团队开发使用，将多个配置文件，合并为一个</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;beans.xml&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h3 id="依赖注入">5. 依赖注入</h3><h4 id="构造器注入">5.1 构造器注入</h4><p>​ 见3</p><h4 id="set方式注入-重点">5.2 Set方式注入 【重点】</h4><ul><li>依赖注入：本质是Set注入<ul><li>依赖：bean对象的创建依赖于容器</li><li>注入：bean对象中的所有属性由容器来注入</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lics.pojo.Address&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;地址&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lics.pojo.Student&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 第一种，普通注入，value  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;lics&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 第二种，Bean注入，ref  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;address&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 数组  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;books&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>红楼梦<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>西游记<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>水浒传<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>三国演义<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- List  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobbies&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>听歌<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>看电影<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>敲代码<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Map  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;身份证&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1234556&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;银行卡&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3243241&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Set  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;games&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>lol<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>coc<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>bob<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- null  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;wife&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Properties  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;driver&quot;</span>&gt;</span>20220628<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span>nnn<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="拓展方式注入">5.3 拓展方式注入</h4><ul><li>p命名空间（property -- set方法）</li><li>c命名空间（construct-args -- 有参构造）</li></ul><h3 id="bean的作用域">6. bean的作用域</h3><p><img src="https://lics-blogs-1258546254.cos.ap-nanjing.myqcloud.com/images/Spring/01-bean-scopes.png" width="85%" style="center"/></p><ul><li><p>单例模式（Spring默认机制）</p></li><li><p>原型模式：每次从容器中getBean的时候，都会产生一个新对象！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;accountService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.something.DefaultAccountService&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>其余的request、session、application等只能在web开发中使用到！</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>EnjoyCoding</category>
      
      <category>JavaWeb</category>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis笔记05--动态SQL&amp;缓存</title>
    <link href="/2022/06/25/EnjoyCoding/JavaWeb/Mybatis/Mybatis05/"/>
    <url>/2022/06/25/EnjoyCoding/JavaWeb/Mybatis/Mybatis05/</url>
    
    <content type="html"><![CDATA[<h3 id="mybatis笔记05--动态sql缓存">Mybatis笔记05--动态SQL&amp;缓存</h3><h4 id="动态sql">1. 动态SQL</h4><p><strong>什么是动态SQL：动态SQL就是根据不同的条件生成不同的SQL语句。</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs xml">如果你之前用过 JSTL 或任何基于类 XML 语言的文本处理器，你对动态 SQL 元素可能会感觉似曾相识。在 MyBatis 之前的版本中，需要花时间了解大量的元素。借助功能强大的基于 OGNL 的表达式，MyBatis 3 替换了之前的大部分元素，大大精简了元素种类，现在要学习的元素种类比原来的一半还要少。<br>if<br>choose (when, otherwise)<br>trim (where, set)<br>foreach<br></code></pre></td></tr></table></figure><h5 id="搭建环境">搭建环境</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `blog`(<br>    `id` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;博客id&#x27;</span>,<br>    `title` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;博客标题&#x27;</span>,<br>    `author` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;博客作者&#x27;</span>,<br>    `create_time` DATETIME <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    `views` <span class="hljs-type">INT</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;浏览量&#x27;</span><br>)ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br></code></pre></td></tr></table></figure><h5 id="if">IF</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogIF&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;blog&quot;</span>&gt;</span><br>    select * from blog<br>    where 1=1<br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>        and title = #&#123;title&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>        and author = #&#123;author&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="choosewhenotherwise">choose、when、otherwise</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogChoose&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;blog&quot;</span>&gt;</span><br>    select * from mybatis.blog<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>                title = #&#123;title&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>                author = #&#123;author&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span>&gt;</span><br>                views = #&#123;views&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="trimwhereset">trim、where、set</h5><p><strong>使用where元素</strong>：where元素只会在子元素返回任何内容的情况下才插入 “WHERE”子句。而且，若子句的开头为 “AND” 或 “OR”，where 元素也会将它们去除。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogIF&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;blog&quot;</span>&gt;</span><br>    select * from mybatis.blog<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>            title = #&#123;title&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>            author = #&#123;author&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>使用set元素</strong>：用于动态更新语句的类似解决方案叫做set。set 元素可以用于动态包含需要更新的列，忽略其它不更新的列。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateBlog&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>    update mybatis.blog<br>    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>            title = #&#123;title&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>            author = #&#123;author&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>    where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>trim</strong>：</p><p><em>prefixOverrides</em>属性会忽略通过管道符分隔的文本序列（注意此例中的空格是必要的）。上述例子会移除所有<em>prefixOverrides</em> 属性中指定的内容，并且插入 <em>prefix</em>属性中指定的内容。</p><p>和 <em>where</em> 元素等价的自定义 trim 元素为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;WHERE&quot;</span> <span class="hljs-attr">prefixOverrides</span>=<span class="hljs-string">&quot;AND |OR &quot;</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过使用<em>trim</em>元素来达到set的效果：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;SET&quot;</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="sql片段">SQL片段</h5><p>有时需要将一些功能的部分抽取出来，方便复用。</p><ol type="1"><li><p>使用sql标签抽取公共的部分</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;if-title-author&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>        title = #&#123;title&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>        author = #&#123;author&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在需要使用的地方用include标签引用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;if-title-author&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h5 id="foreachimage-04-foreach">ForEach<imgsrc="/..%20https://lics-blogs-1258546254.cos.ap-nanjing.myqcloud.com/images/MyBatis/04-foreach.png"alt="image-04-foreach" /></h5><h4 id="缓存">2. 缓存</h4><h5 id="简介">2.1 简介</h5><p>查询：链接数据库 -- 耗资源！</p><p>​ 将一次查询的结果，暂存到一个可以直接取到的地方：内存 -- 缓存</p><p>再次查询相同数据的时候，直接走缓存，就不用走数据库了。</p><ol type="1"><li>什么是缓存[Cache]？<ul><li>存在内存中的数据</li><li>将经常查询的数据放在缓存（内存）中，用户去查询数据不用从关系型数据库数据文件（硬盘上）查询，从缓存中查询，从而提高查询效率，解决高并发系统的性能问题。</li></ul></li><li>为什么使用缓存？<ul><li>减少和数据库的交互次数，减少系统开销，提高系统效率。</li></ul></li><li>什么样的数据能使用缓存？<ul><li>经常查询且不经常改变的数据</li></ul></li></ol><h5 id="mybatis缓存">2.2 Mybatis缓存</h5><ul><li>MyBatis内置了一个强大的事务性查询缓存机制，它可以非常方便地配置和定制。</li><li>MyBatis中默认定义了两级缓存：<strong>一级缓存</strong>和<strong>二级缓存</strong><ul><li>默认情况下，只启用了本地的会话缓存，它仅仅对一个会话中（sqlSession）的数据进行缓存。</li><li>二级缓存需要手动开启和配置，是基于namespace（一个接口/一个Mapper.xml文件）级别的缓存。</li></ul></li></ul><h5 id="一级缓存">2.3 一级缓存</h5><ul><li>默认是开启的，只在一次sqlSession中有效</li></ul><p>​ 缓存失效的情况：</p><ol type="1"><li><p>查询不同的东西</p></li><li><p>增删改操作，可能会改变原来的数据，所以必定会刷新缓存！</p></li><li><p>查询不同的Mapper.xml</p></li><li><p>手动清理缓存：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">sqlSession.clearCache(); <br></code></pre></td></tr></table></figure></li></ol><h5 id="二级缓存">2.4 二级缓存</h5><p>要启用全局的二级缓存，只需要在SQL 映射文件中添加一行：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>也可以自定义参数：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span></span><br><span class="hljs-tag">  <span class="hljs-attr">eviction</span>=<span class="hljs-string">&quot;FIFO&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">flushInterval</span>=<span class="hljs-string">&quot;60000&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;512&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">readOnly</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>小结：</p><ul><li>只要开启了二级缓存，在同一个Mapper下就有效</li><li>所有的数据都会先放在一级缓存中</li><li>只有当会话关闭或者提交时，才会提交到二级缓存</li></ul>]]></content>
    
    
    <categories>
      
      <category>EnjoyCoding</category>
      
      <category>JavaWeb</category>
      
      <category>Mybatis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis笔记04--多对一与一对多</title>
    <link href="/2022/06/25/EnjoyCoding/JavaWeb/Mybatis/Mybatis04/"/>
    <url>/2022/06/25/EnjoyCoding/JavaWeb/Mybatis/Mybatis04/</url>
    
    <content type="html"><![CDATA[<h3id="mybatis笔记04--多对一与一对多">Mybatis笔记04--多对一与一对多</h3><h4 id="多对一处理">1. 多对一处理</h4><p>多个学生选一位老师的课</p><ul><li>多个学生，对应一位老师</li><li>对于学生而言，<strong>关联</strong>，多个学生关联一个老师【多对一】</li><li>对于老师而言，<strong>集合</strong>，一个老师有很多个学生【一对多】</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `teacher` (<br>  `id` <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> teacher(`id`, `name`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;秦老师&#x27;</span>); <br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `student` (<br>  `id` <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `tid` <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  KEY `fktid` (`tid`),<br>  <span class="hljs-keyword">CONSTRAINT</span> `fktid` <span class="hljs-keyword">FOREIGN</span> KEY (`tid`) <span class="hljs-keyword">REFERENCES</span> `teacher` (`id`)<br>) ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;小张&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;小李&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;小王&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>);<br></code></pre></td></tr></table></figure><h5 id="按照查询嵌套处理">按照查询嵌套处理</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    思路：</span><br><span class="hljs-comment">        1. 查询所有的学生信息</span><br><span class="hljs-comment">        2. 根据查询出的学生的tid，寻找对应的老师</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudent&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;StudentTeacher&quot;</span>&gt;</span><br>    select * from student s, teacher t<br>    where s.tid = t.id;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;StudentTeacher&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 复杂属性（Teacher），需要单独处理</span><br><span class="hljs-comment">            对象：association</span><br><span class="hljs-comment">            集合：collection</span><br><span class="hljs-comment">        --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Teacher&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;getTeacher&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br>    select * from teacher where id = #&#123;tid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="按照结果嵌套处理">按照结果嵌套处理</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 按照结果嵌套处理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudent2&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;StudentTeacher2&quot;</span>&gt;</span><br>    select s.id sid, s.name sname, t.name tname, t.id tid<br>    from student s, teacher t<br>    where s.tid = t.id;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;StudentTeacher2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sid&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sname&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tname&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><p>回顾mysql多对一查询方式：</p><ul><li>子查询 -- 【按照查询嵌套处理】</li><li>联表查询 -- 【按照结果嵌套处理】</li></ul><h4 id="一对多处理">2. 一对多处理</h4><p>比如：一个老师教授多个学生。对于老师而言，就是一对多的关系。</p><h5 id="按照查询嵌套处理-1">按照查询嵌套处理</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher2&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;TeacherStudent2&quot;</span> &gt;</span><br>    select * from teacher<br>    where id = #&#123;tid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;TeacherStudent2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;students&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;ArrayList&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Student&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;getStudentByTeacherId&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudentByTeacherId&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>    select * from student<br>    where tid = #&#123;tid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="按照结果嵌套处理-1">按照结果嵌套处理</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;TeacherStudent&quot;</span>&gt;</span><br>    select s.id sid, s.name sname, t.name tname, t.id tid<br>    from student s, teacher t<br>    where s.tid = t.id and t.id = #&#123;tid&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;TeacherStudent&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tname&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 复杂属性（Teacher），需要单独处理</span><br><span class="hljs-comment">        对象：association</span><br><span class="hljs-comment">        集合：collection</span><br><span class="hljs-comment">       javaType = 指定属性的类型！</span><br><span class="hljs-comment">       集合中的泛型信息，用 ofType获取</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;students&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sid&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sname&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="小结">3. 小结</h4><ol type="1"><li><p>关联 -- association 【多对一】</p></li><li><p>集合 -- collection 【一对多】</p></li><li><p>javaType &amp; ofType</p><ul><li><p>javaType 用来指定实体类中属性的类型</p></li><li><p>ofType用来指定映射到List或者集合中的pojo类型（泛型中的约束类型）</p></li></ul></li></ol><p>注意点：</p><ul><li>保证SQL的可读性，尽量保证通俗易懂</li><li>注意一对多和多对一中，属性名和字段的问题</li></ul>]]></content>
    
    
    <categories>
      
      <category>EnjoyCoding</category>
      
      <category>JavaWeb</category>
      
      <category>Mybatis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis笔记03--日志&amp;分页&amp;注解开发</title>
    <link href="/2022/06/22/EnjoyCoding/JavaWeb/Mybatis/Mybatis03/"/>
    <url>/2022/06/22/EnjoyCoding/JavaWeb/Mybatis/Mybatis03/</url>
    
    <content type="html"><![CDATA[<h3id="mybatis笔记03--日志分页注解开发">Mybatis笔记03--日志&amp;分页&amp;注解开发</h3><h4 id="日志">1. 日志</h4><h5 id="日志工厂">1.1 日志工厂</h5><p>当数据库出现异常时，需要排错。日志是最好的助手！</p><p>曾经：sout、debug</p><p>现在：日志工厂！</p><p><img src="https://lics-blogs-1258546254.cos.ap-nanjing.myqcloud.com/images/MyBatis/03-settings-log.png" width="90%"  style="center"/></p><ul><li>SLF4J</li><li>LOG4J 【掌握】</li><li>LOG4J2</li><li>JDK_LOGGING</li><li>COMMONS_LOGGING</li><li>STDOUT_LOGGING 【掌握】</li><li>NO_LOGGING</li></ul><p>在设置中设定MyBatis中具体使用哪一个日志！</p><p><strong>STDOUT_LOGGING 标准日志输出</strong></p><p>在mybatis的核心配置文件中，配置日志</p><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="log4j">2.2 LOG4J</h5><p>什么是LOG4J？</p><ul><li>是<ahref="https://baike.baidu.com/item/Apache/8512995">Apache</a>的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是<ahref="https://baike.baidu.com/item/控制台/2438626">控制台</a>、文件、<ahref="https://baike.baidu.com/item/GUI">GUI</a>组件</li><li>也可以控制每一条日志的输出格式</li><li>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程</li><li>通过一个<ahref="https://baike.baidu.com/item/配置文件/286550">配置文件</a>来灵活地进行配置，而不需要修改应用的代码</li></ul><ol type="1"><li><p>先导入log4j的包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>log4j.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span><br><span class="hljs-attr">log4j.rootLogger</span>=<span class="hljs-string">DEBUG,console,file</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#控制台输出的相关设置</span><br><span class="hljs-attr">log4j.appender.console</span> = <span class="hljs-string">org.apache.log4j.ConsoleAppender</span><br><span class="hljs-attr">log4j.appender.console.Target</span> = <span class="hljs-string">System.out</span><br><span class="hljs-attr">log4j.appender.console.Threshold</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.appender.console.layout</span> = <span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-attr">log4j.appender.console.layout.ConversionPattern</span>=<span class="hljs-string">[%c]-%m%n</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#文件输出的相关设置</span><br><span class="hljs-attr">log4j.appender.file</span> = <span class="hljs-string">org.apache.log4j.RollingFileAppender</span><br><span class="hljs-attr">log4j.appender.file.File</span>=<span class="hljs-string">./log/lics.log</span><br><span class="hljs-attr">log4j.appender.file.MaxFileSize</span>=<span class="hljs-string">10mb</span><br><span class="hljs-attr">log4j.appender.file.Threshold</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.appender.file.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-attr">log4j.appender.file.layout.ConversionPattern</span>=<span class="hljs-string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#日志输出级别</span><br><span class="hljs-attr">log4j.logger.org.mybatis</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.logger.java.sql</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.logger.java.sql.Statement</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.logger.java.sql.ResultSet</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.logger.java.sql.PreparedStatement</span>=<span class="hljs-string">DEBUG</span><br></code></pre></td></tr></table></figure></li><li><p>配置log4j为日志的实现</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;LOG4J&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><p><strong>简单使用</strong></p><ol type="1"><li><p>在要使用log4j的类中，导入包 importorg.apache.log4j.Logger;</p></li><li><p>日志对象，参数为当前类的class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> Logger.getLogger(UserMapperTest.class);<br></code></pre></td></tr></table></figure></li><li><p>日志级别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">logger.info(<span class="hljs-string">&quot;info:进入了test02方法&quot;</span>);<br>logger.debug(<span class="hljs-string">&quot;debug:进入了test02方法&quot;</span>);<br>logger.error(<span class="hljs-string">&quot;error:进入了test02方法&quot;</span>);<br></code></pre></td></tr></table></figure></li></ol><h4 id="分页">2. 分页</h4><p><strong>为什么要分页？</strong></p><ul><li>减少数据的处理量</li></ul><p><strong>使用limit分页</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">语法：<br>select * from user limit startIndex, pageSize;<br>select * from user limit n; # [0, n-1]<br></code></pre></td></tr></table></figure><p><strong>使用Mybatis实现分页，核心：SQL</strong></p><ol type="1"><li><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 分页</span><br>List&lt;User&gt; <span class="hljs-title function_">getUserByLimit</span><span class="hljs-params">(Map&lt;String, Integer&gt; map)</span>;<br></code></pre></td></tr></table></figure></li><li><p>Mapper.XML</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByLimit&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;</span><br>    select * from mybatis.user<br>    limit #&#123;startIndex&#125;, #&#123;pageSize&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetUserByLimit</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br><br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br><br>    HashMap&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    map.put(<span class="hljs-string">&quot;startIndex&quot;</span>, <span class="hljs-number">2</span>);<br>    map.put(<span class="hljs-string">&quot;pageSize&quot;</span>, <span class="hljs-number">2</span>);<br><br>    List&lt;User&gt; userByLimit = mapper.getUserByLimit(map);<br><br>    System.out.println(userByLimit);<br><br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="使用注解开发">3. 使用注解开发</h4><h5 id="注解在接口上实现">3.1 注解在接口上实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;select * from user&quot;)</span><br>List&lt;User&gt; <span class="hljs-title function_">getUserListByAnnotations</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><h5 id="需要在核心配置文件中绑定接口">3.2需要在核心配置文件中绑定接口</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lics.dao.UserMapper&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>本质：反射机制实现</p><p>底层：动态代理</p><h5 id="crud">3.3 CRUD</h5><p>编写接口，增加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;select * from user&quot;)</span><br>List&lt;User&gt; <span class="hljs-title function_">getUserListByAnnotations</span><span class="hljs-params">()</span>;<br><br><span class="hljs-meta">@Update(&quot;update user &quot; +</span><br><span class="hljs-meta">        &quot;set id = #&#123;id&#125;, name = #&#123;name&#125;, pwd = #&#123;password&#125; &quot; +</span><br><span class="hljs-meta">        &quot;where id = #&#123;id&#125;&quot;)</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">updateUserByAnnotations</span><span class="hljs-params">(User user)</span>;<br><br><span class="hljs-meta">@Insert(&quot;insert into user (id, name, pwd) &quot; +</span><br><span class="hljs-meta">        &quot;values &quot; +</span><br><span class="hljs-meta">        &quot;(#&#123;id&#125;, #&#123;name&#125;, #&#123;password&#125;)&quot;)</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">addUserByAnnotations</span><span class="hljs-params">(User user)</span>;<br><br><span class="hljs-meta">@Delete(&quot;delete from user &quot; +</span><br><span class="hljs-meta">        &quot;where id = #&#123;id&#125;&quot;)</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">deleteUserByIdByAnnotations</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-type">int</span> id)</span>;<br></code></pre></td></tr></table></figure><p><strong>关于@Param() 注解</strong></p><ul><li>基本类型或者String类型的参数，需要加上</li><li>引用类型不需要加</li><li>如果只有一个基本类型，可以忽略，但建议都加上！</li><li>在SQL中引用的就是@Param() 中设定的属性名。</li></ul><p><strong>#{} 和 ${} 区别</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span>）#&#123;&#125;是预编译处理，$&#123;&#125;是字符串替换。<br><span class="hljs-number">2</span>）mybatis在处理两个字符时，处理的方式也是不同的：<br>①、处理#&#123;&#125;时，会将sql中的#&#123;&#125;整体替换为占位符（即：?），调用PreparedStatement的set方法来赋值；<br>②、在处理$&#123;&#125; 时，就是把$&#123;&#125;替换成变量的值。<br><span class="hljs-number">3</span>）假如用$&#123;&#125;来编写SQL会出现：恶意SQL注入，对于数据库的数据安全性就没办法保证了。<br><span class="hljs-number">4</span>）使用 #&#123;&#125; 可以有效的防止SQL注入，提高系统安全性：<br>预编译的机制。预编译是提前对SQL语句进行预编译，而后再调用SQL，注入的参数就不会再进行SQL编译。而SQL注入是发生在编译的过程中，因为恶意注入了某些特殊字符，最后被编译时SQL时轻而易举的通过，从而导致数据泄露。而预编译机制则可以很好的防止SQL注入。<br></code></pre></td></tr></table></figure><h4 id="lombok">4. Lombok</h4><p>使用步骤：</p><ol type="1"><li><p>在IDEA中安装Lombok插件！</p></li><li><p>在项目中导入lombok的jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在实体类上加注解</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span> and <span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@FieldNameConstants</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-meta">@EqualsAndHashCode</span><br><span class="hljs-meta">@AllArgsConstructor</span>, <span class="hljs-meta">@RequiredArgsConstructor</span> and <span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@Log</span>, <span class="hljs-meta">@Log4j</span>, <span class="hljs-meta">@Log4j2</span>, <span class="hljs-meta">@Slf4j</span>, <span class="hljs-meta">@XSlf4j</span>, <span class="hljs-meta">@CommonsLog</span>, <span class="hljs-meta">@JBossLog</span>, <span class="hljs-meta">@Flogger</span>, <span class="hljs-meta">@CustomLog</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Builder</span><br><span class="hljs-meta">@SuperBuilder</span><br><span class="hljs-meta">@Singular</span><br><span class="hljs-meta">@Delegate</span><br><span class="hljs-meta">@Value</span><br><span class="hljs-meta">@Accessors</span><br><span class="hljs-meta">@Wither</span><br><span class="hljs-meta">@With</span><br><span class="hljs-meta">@SneakyThrows</span><br><span class="hljs-meta">@val</span><br><span class="hljs-meta">@var</span><br>experimental <span class="hljs-meta">@var</span><br><span class="hljs-meta">@UtilityClass</span><br>Lombok config system<br>Code inspections<br>Refactoring <span class="hljs-title function_">actions</span> <span class="hljs-params">(lombok and delombok)</span><br></code></pre></td></tr></table></figure><p>说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span>: 无参构造、get、set、toString、hashCode、equals<br><span class="hljs-meta">@AllArgsConstructor</span>：有参构造<br><span class="hljs-meta">@NoArgsConstructor</span>：无参构造<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>EnjoyCoding</category>
      
      <category>JavaWeb</category>
      
      <category>Mybatis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis笔记02--CRUD&amp;核心配置&amp;resultMap</title>
    <link href="/2022/06/19/EnjoyCoding/JavaWeb/Mybatis/Mybatis02/"/>
    <url>/2022/06/19/EnjoyCoding/JavaWeb/Mybatis/Mybatis02/</url>
    
    <content type="html"><![CDATA[<h3id="mybatis笔记02--crud核心配置resultmap">Mybatis笔记02--CRUD&amp;核心配置&amp;resultMap</h3><h4 id="crud">1. CRUD</h4><p>（1）<strong>namespace</strong>:namespace中的包名要和Dao/mapper接口的包名一致！</p><p>（2）<strong>select</strong>: 选择/查询语句；</p><ul><li><p>id：就是对应的namespace中的方法名；</p></li><li><p>resultType: Sql语句执行的返回值</p></li><li><p>parameterType：参数类型</p><p><strong>步骤</strong>：</p></li></ul><ol type="1"><li><p>编写接口</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据id查询用户</span><br>User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br></code></pre></td></tr></table></figure></li><li><p>编写对应的mapper中的sql语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.lics.pojo.User&quot;</span>&gt;</span><br>    select * from mybatis.user where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 获取sqlSession对象</span><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br><br>    <span class="hljs-comment">// 执行SQL</span><br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mapper.getUserById(<span class="hljs-number">1</span>);<br>    System.out.println(user);<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>​ （3）增</p><div class="code-wrapper"><pre><code class="hljs">  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.lics.pojo.User&quot;</span>&gt;</span><br>    insert into mybatis.user (id, name, pwd) values<br>    (#&#123;id&#125;, #&#123;name&#125;, #&#123;pwd&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure></code></pre><p>​ （4）删</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span><br>    delete from mybatis.user<br>    where id=#&#123;id&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​ （5）改</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.lics.pojo.User&quot;</span>&gt;</span><br>    update mybatis.user<br>    set name = #&#123;name&#125;, pwd=#&#123;pwd&#125;<br>    where id=#&#123;id&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong><font color="red">注意：增删改需要提交事务！ </font></strong></p><h4 id="核心配置">2. 核心配置</h4><p>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。配置文档的顶层结构如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml">configuration（配置）<br>    properties（属性）<br>    settings（设置）<br>    typeAliases（类型别名）<br>    typeHandlers（类型处理器）<br>    objectFactory（对象工厂）<br>    plugins（插件）<br>    environments（环境配置）<br>    environment（环境变量）<br>    transactionManager（事务管理器）<br>    dataSource（数据源）<br>    databaseIdProvider（数据库厂商标识）<br>    mappers（映射器）<br></code></pre></td></tr></table></figure><h5 id="环境配置environments">2.1 环境配置（environments）</h5><p>Mybatis可以配置成适应多种环境</p><p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory实例只能选择一种环境。</strong></p><p>为了指定创建哪种环境，只要将它作为可选的参数传递给SqlSessionFactoryBuilder 即可。可以接受环境配置的两个方法签名是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(reader, environment);<br><span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(reader, environment, properties);<br></code></pre></td></tr></table></figure><p>如果忽略了环境参数，那么将会加载默认环境，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(reader);<br><span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(reader, properties);<br></code></pre></td></tr></table></figure><p>Mybatis默认的事务管理器：JDBC， 连接池：POOLED</p><h5 id="属性properties">2.2 属性（properties）</h5><p>这些属性可以在外部进行配置，并可以进行动态替换。既可以在典型的 Java属性文件中配置这些属性，也可以在 properties元素的子元素中设置【db.properties】。</p><p>编写一个配置文件db.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8</span><br><span class="hljs-attr">username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">***</span><br></code></pre></td></tr></table></figure><p>也可以在核心配置文件中引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 引入外部配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;db.properties&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;111&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>可以直接引入外部文件</p></li><li><p>可以在<properties> </properties>中增加一些属性配置</p></li><li><p>如果上面两处有同一个字段，优先使用外部文件中的！</p><p>详细说明如下：</p><p>如果一个属性在不只一个地方进行了配置，那么，MyBatis将按照下面的顺序来加载：</p><ul><li>首先读取在 properties 元素体内指定的属性。</li><li>然后根据 properties 元素中的 resource属性读取类路径下属性文件，或根据 url属性指定的路径读取属性文件，并<strong>覆盖</strong>之前读取过的同名属性。</li><li>最后读取作为方法参数传递的属性，并<strong>覆盖</strong>之前读取过的同名属性。</li></ul><p>因此，通过方法参数传递的属性具有最高优先级，resource/url属性中指定的配置文件次之，最低优先级的则是 properties元素中指定的属性。</p></li></ul><h5 id="类型别名typealiases">2.3 类型别名（typeAliases）</h5><p>类型别名可为 Java类型设置一个缩写名字，意在降低冗余的全限定类名书写。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.lics.pojo.User&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;User&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也可以指定一个包名，mybatis会在包名下搜索需要的Java Bean，比如：</p><p>扫描实体类的包，它的默认别名就是这个类的 类名，首字母小写。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.lics.pojo&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="映射器mappers">2.4 映射器（mappers）</h5><p>MapperRegistry: 注册绑定Mapper文件</p><p>方式一：【推荐使用】使用相对于类路径的资源引用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/lics/dao/UserMapper.xml&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>方式二：使用class文件绑定注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lics.dao.UserMapper&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​ 注意点：</p><ul><li>接口和他的Mapper配置文件必须同名，且在同一个包下！</li></ul><p>方式三：使用扫描包进行注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.lics.dao&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意点同方式二。</p><h4 id="生命周期和作用域">3. 生命周期和作用域</h4><p>作用域，和生命周期，是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题</strong>。</p><p><strong>SqlSessionFactoryBuilder</strong></p><ul><li>一旦创建了 SqlSessionFactory，就不再需要它</li><li>局部变量</li></ul><p><strong>SqlSessionFactory</strong>：</p><ul><li>可以想象成数据库连接池</li><li>SqlSessionFactory一旦被创建就应该在应用的运行期间一直存在，<strong>没有任何理由丢弃它或重新创建另一个实例</strong>。</li><li>最佳作用域是应用作用域，最简单的就是使用<strong>单例模式</strong>或者静态单例模式</li></ul><p><strong>SqlSession</strong>：</p><ul><li>连接到连接池的一个请求</li><li>SqlSession的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域</li><li>返回一个响应后，就关闭它，否则资源被占用！</li></ul><h4 id="解决类的属性名和数据库中字段名不一致的问题">4.解决类的属性名和数据库中字段名不一致的问题</h4><h6 id="问题">4.1 问题</h6><p>数据库字段：</p><p><img src="https://lics-blogs-1258546254.cos.ap-nanjing.myqcloud.com/images/MyBatis/01-dbnames.png" width="70%"  style="center"/></p><p>类中属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br></code></pre></td></tr></table></figure><p>查询出现问题：</p><p><img src="https://lics-blogs-1258546254.cos.ap-nanjing.myqcloud.com/images/MyBatis/02-problem-pwdnull.png" width="70%"  style="center"/></p><p>解决办法：</p><ul><li>起别名（不推荐）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>    select id, name, pwd as password from mybatis.user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong>resultMap</strong></li></ul><h6 id="resultmap">4.2 resultMap</h6><p>结果集映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- column：数据库中的字段  property：属性名 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;</span><br>    select * from mybatis.user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素</li><li>ResultMap的设计思想是，对简单的语句做到零配置，对于复杂一点的语句，只需要描述语句之间的关系就行了。</li></ul>]]></content>
    
    
    <categories>
      
      <category>EnjoyCoding</category>
      
      <category>JavaWeb</category>
      
      <category>Mybatis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis笔记01--环境搭建</title>
    <link href="/2022/06/18/EnjoyCoding/JavaWeb/Mybatis/Mybatis01/"/>
    <url>/2022/06/18/EnjoyCoding/JavaWeb/Mybatis/Mybatis01/</url>
    
    <content type="html"><![CDATA[<h3 id="mybatis笔记01--环境搭建">Mybatis笔记01--环境搭建</h3><h4 id="获取mybatis">获取Mybatis</h4><ul><li>maven仓库</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><ul><li>github: https://github.com/mybatis/mybatis-3/releases</li><li>中文文档：https://mybatis.org/mybatis-3/zh/index.html</li></ul><h4 id="搭建环境">搭建环境</h4><h5 id="创建数据库">1. 创建数据库</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database `mybatis`;<br><br>use `mybatis`;<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> `<span class="hljs-keyword">user</span>` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">primary</span> key,<br>  `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">DEfault</span> <span class="hljs-keyword">null</span>,<br>  `pwd` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span><br>) engine<span class="hljs-operator">=</span>innodb <span class="hljs-keyword">default</span> charset<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `<span class="hljs-keyword">user</span>` (`id`, `name`, `pwd`) <span class="hljs-keyword">VALUES</span> <br>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;123456&#x27;</span>), <br>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-string">&#x27;123456&#x27;</span>), <br>(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-string">&#x27;123890&#x27;</span>); <br></code></pre></td></tr></table></figure><h5 id="创建maven项目并导入maven依赖">2.创建maven项目，并导入maven依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--   mysql驱动   --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.49<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--   mybatis   --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--   junit   --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="创建一个模块module">3. 创建一个模块module</h5><ul><li><h6id="编写mybatis的核心配置文件">编写mybatis的核心配置文件</h6></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--configuration 核心配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="hljs-symbol">&amp;amp;</span>useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;zxc&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><h6 id="编写mybatis工具类">编写mybatis工具类</h6></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisUtils</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 使用Mybatis第一步： 获取sqlSessionFactory对象</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br>            sqlSessionFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。</span><br>    <span class="hljs-comment">// SqlSession 提供了在数据库执行 SQL 命令所需的所有方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title function_">getSqlSession</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sqlSessionFactory.openSession();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><h6 id="编写代码">编写代码</h6><ul><li><p>编写实体类</p></li><li><p>编写接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    List&lt;User&gt; <span class="hljs-title function_">getUserList</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>接口实现类由原来的***Impl转换为一个Mapper配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.lics.dao.UserDao&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.lics.pojo.User&quot;</span>&gt;</span><br>        select * from mybatis.user<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><font color='red'>每一个Mapper.XMl都需要在mybatis的核心配置文件中注册！</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/lics/dao/UserMapper.xml&quot;</span> /&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoTest</span> &#123;<br><br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// 获取sqlSession对象</span><br>      <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br><br>      <span class="hljs-comment">// 执行SQL</span><br>      <span class="hljs-type">UserDao</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserDao.class);<br>      List&lt;User&gt; userList = mapper.getUserList();<br><br>      System.out.println(userList);<br><br>      sqlSession.close();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="xml文件导出失败">4. xml文件导出失败：</h5><p>在pom文件中增加以下设置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--maven的资源过滤问题--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>EnjoyCoding</category>
      
      <category>JavaWeb</category>
      
      <category>Mybatis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>IDEA使用技巧笔记02</title>
    <link href="/2022/06/04/EnjoyCoding/IDEA/IDEA02/"/>
    <url>/2022/06/04/EnjoyCoding/IDEA/IDEA02/</url>
    
    <content type="html"><![CDATA[<h3 id="ideawindows使用技巧笔记02">IDEA（windows）使用技巧笔记02</h3><p><font color="red">注：本博客整理的是windows下的IDEA相关的快捷键，MAC等系统可能有所差异。</font></p><h5 id="编写高质量代码">1. 编写高质量代码</h5><table style="width:100%;"><colgroup><col style="width: 15%" /><col style="width: 60%" /><col style="width: 16%" /><col style="width: 8%" /></colgroup><thead><tr class="header"><th>使用场景</th><th>快捷键</th><th style="text-align: left;">说明</th><th>所属菜单</th></tr></thead><tbody><tr class="odd"><td><strong>1. 代码重构</strong></td><td>shift + F6</td><td style="text-align: left;">重构变量名</td><td>Refactor</td></tr><tr class="even"><td></td><td>ctrl + F6<br />(更方便的方式：<br />修改后按 alt + Enter )</td><td style="text-align: left;">重构方法签名</td><td>Refactor</td></tr><tr class="odd"><td><strong>2. 抽取</strong></td><td>ctrl + alt + V</td><td style="text-align: left;">抽取为变量</td><td>Refactor</td></tr><tr class="even"><td></td><td>ctrl + alt + C</td><td style="text-align: left;">抽取为静态变量</td><td>Refactor</td></tr><tr class="odd"><td></td><td>ctrl + alt + F</td><td style="text-align: left;">抽取为成员变量</td><td>Refactor</td></tr><tr class="even"><td></td><td>ctrl + alt + P</td><td style="text-align: left;">抽取为方法参数</td><td>Refactor</td></tr><tr class="odd"><td></td><td>ctrl + alt + M</td><td style="text-align: left;">抽取代码段为方法</td><td>Refactor</td></tr></tbody></table><h5 id="寻找修改轨迹git的集成">2. 寻找修改轨迹（git的集成）</h5><ul><li><p><strong>annotate</strong>：在代码行数上右键可以看到此选项，打开后能看到commit信息、作者等。</p></li><li><p><strong>revert</strong>：撤销，对应快捷键<strong>“ctrl + alt +Z”</strong>，可以对：</p><ul><li>单处修改</li><li>单个文件</li><li>文件夹</li></ul><p>进行撤销操作，回滚到上次提交的状态。</p></li><li><p><strong>local history </strong>: 本地修改记录，通过Help-&gt; FindAction (或快捷键ctrl shift A) 搜索“localhistory”，打开此对话框，可以查看idea的本地的修改记录，即使未使用任何git等版本控制工具，也可以使用。</p></li></ul><h5 id="关联一切待补充">3. 关联一切（待补充）</h5><ul><li><h6 id="与spring的关联">与Spring的关联</h6></li><li><h6 id="与数据库的关联">与数据库的关联</h6></li></ul><h5 id="调试程序">4. 调试程序</h5><table><colgroup><col style="width: 30%" /><col style="width: 30%" /><col style="width: 22%" /><col style="width: 16%" /></colgroup><thead><tr class="header"><th>使用场景</th><th>快捷键</th><th>说明</th><th>所属菜单</th></tr></thead><tbody><tr class="odd"><td><strong>1. 断点调试</strong></td><td>ctrl + F8</td><td>当前行添加断点/删除断点</td><td>Run</td></tr><tr class="even"><td></td><td>shift + F9</td><td>单步调试（Debug模式运行）</td><td>Run</td></tr><tr class="odd"><td></td><td>F8</td><td>单步运行（Step Over，Debug模式下）</td><td></td></tr><tr class="even"><td></td><td>F9</td><td>运行到下一个断点（Resume，Debug模式下，<br />若没有下一个断点则运行至结束）</td><td></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>EnjoyCoding</category>
      
      <category>IDEA使用技巧</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>IDEA使用技巧笔记01</title>
    <link href="/2022/06/01/EnjoyCoding/IDEA/IDEA01/"/>
    <url>/2022/06/01/EnjoyCoding/IDEA/IDEA01/</url>
    
    <content type="html"><![CDATA[<h3 id="ideawindows使用技巧笔记01">IDEA（windows）使用技巧笔记01</h3><p><font color="red">注：本博客整理的是windows下的IDEA相关的快捷键，MAC等系统可能有所差异。</font></p><h5 id="窗口跳转">1. 窗口跳转</h5><p>（1）快捷键：<strong>alt + 数字</strong></p><p>（2）可以设置显示窗口编号：</p><p><img src="https://lics-blogs-1258546254.cos.ap-nanjing.myqcloud.com/images/IDEA/01_show_tools_numbers.png" width="80%" style="center"/></p><p>​设置后，各工具窗口会显示其对应的数字编号，想跳转到某个窗口时，就可以按下“alt+相应的数字键”。</p><p><img src="https://lics-blogs-1258546254.cos.ap-nanjing.myqcloud.com/images/IDEA/02_tools_windows_ex.png" width="8%" style="center"/></p><h5 id="跳转相关的快捷键">2. 跳转相关的快捷键</h5><table><colgroup><col style="width: 18%" /><col style="width: 18%" /><col style="width: 43%" /><col style="width: 18%" /></colgroup><thead><tr class="header"><th>使用场景</th><th>快捷键</th><th style="text-align: left;">说明</th><th>所属菜单</th></tr></thead><tbody><tr class="odd"><td><strong>1. 项目之间跳转</strong></td><td>ctrl + alt + ]</td><td style="text-align: left;">跳转到下个项目</td><td>Window</td></tr><tr class="even"><td></td><td>ctrl + alt + [</td><td style="text-align: left;">跳转到上个项目</td><td>Window</td></tr><tr class="odd"><td><strong>2. 文件之间跳转</strong></td><td>ctrl + E</td><td style="text-align: left;">打开最近查看的文件（Recent Files）</td><td>View</td></tr><tr class="even"><td></td><td>ctrl + shift + E</td><td style="text-align: left;">打开最近编辑的文件（Recently ChangedFiles）</td><td>View</td></tr><tr class="odd"><td></td><td>ctrl + shift + Backspace<br />（<strong>or鼠标侧键</strong>）</td><td style="text-align: left;">跳转到上次编辑的地方（Last EditLocation）</td><td>Navigate</td></tr><tr class="even"><td></td><td><br />（<strong>or鼠标侧键</strong>）</td><td style="text-align: left;">跳转到下次编辑的地方（Next EditLocation）</td><td>Navigate</td></tr><tr class="odd"><td></td><td>（ctrl+）alt + 左键头</td><td style="text-align: left;">跳转到下次浏览的地方（Forward）</td><td>Navigate</td></tr><tr class="even"><td></td><td>（ctrl+）alt + 右键头</td><td style="text-align: left;">跳转到上次浏览的地方（Back）</td><td>Navigate</td></tr><tr class="odd"><td>利用标签跳转<br />浏览源码等场景</td><td>F11</td><td style="text-align: left;">添加/删除书签</td><td></td></tr><tr class="even"><td></td><td>ctrl + F11</td><td style="text-align: left;">添加带助记符号的书签</td><td></td></tr><tr class="odd"><td></td><td>ctrl + 数字键</td><td style="text-align: left;">带助记符号的标签之间的跳转</td><td></td></tr><tr class="even"><td>收藏位置和文件</td><td>双击Favourites窗口<br />中的书签列表<br /><img src="https://lics-blogs-1258546254.cos.ap-nanjing.myqcloud.com/images/IDEA/03_bookmarks.png" width="50%" style="center"/></td><td style="text-align: left;">也可以跳转到书签对应的代码位置</td><td></td></tr><tr class="odd"><td><strong>3. 编辑区和文件区<br />之间的跳转</strong></td><td>alt + 1</td><td style="text-align: left;">代码编辑区跳转到文件区</td><td></td></tr><tr class="even"><td></td><td>Esc</td><td style="text-align: left;">文件区跳转到代码编辑区</td><td></td></tr></tbody></table><h5 id="快速定位代码">3. 快速定位代码</h5><table><colgroup><col style="width: 18%" /><col style="width: 18%" /><col style="width: 43%" /><col style="width: 18%" /></colgroup><thead><tr class="header"><th>使用场景</th><th>快捷键</th><th style="text-align: left;">说明</th><th>所属菜单</th></tr></thead><tbody><tr class="odd"><td><strong>精准搜索</strong></td><td>ctrl + N</td><td style="text-align: left;">定位类</td><td>Navigate</td></tr><tr class="even"><td></td><td>ctrl + shift + N</td><td style="text-align: left;">定位文件</td><td>Navigate</td></tr><tr class="odd"><td></td><td>ctrl + alt + shift + N</td><td style="text-align: left;">定位符号<br />（符号：方法名/属性）</td><td>Navigate</td></tr><tr class="even"><td></td><td>ctrl + shift +F<br />(若无效，可能是跟windows<br />自带的输入法的简繁体<br />切换快捷键冲突，关闭之。)</td><td style="text-align: left;">定位字符串。<br />相关选项：<br />Cc:区分大小写<br />W: 单词匹配<br />.*：正则表达式匹配<br />File mask:在指定的文件类型中查找</td><td>Edit</td></tr></tbody></table><h5 id="代码小助手">4. 代码小助手</h5><table><colgroup><col style="width: 18%" /><col style="width: 18%" /><col style="width: 43%" /><col style="width: 18%" /></colgroup><thead><tr class="header"><th>使用场景</th><th>快捷键</th><th style="text-align: left;">说明</th><th>备注</th></tr></thead><tbody><tr class="odd"><td><strong>1. 移动光标与选择</strong></td><td>shift + 右箭头</td><td style="text-align: left;">选中下一个字符</td><td><em>小结：大部分移动光标的快捷键，<br />加上shift可以进行选中</em></td></tr><tr class="even"><td></td><td>ctrl + 右箭头</td><td style="text-align: left;">移动光标到单词结束位置</td><td></td></tr><tr class="odd"><td></td><td>ctrl + shift + 右箭头</td><td style="text-align: left;">选中到单词结束位置</td><td></td></tr><tr class="even"><td></td><td>Home</td><td style="text-align: left;">移动光标到行首</td><td></td></tr><tr class="odd"><td></td><td>ctrl + alt + shift + J</td><tdstyle="text-align: left;">批量选中操作<br />需要先选中一个符号/变量</td><td></td></tr><tr class="even"><td><strong>2. 代码模板</strong><br />（非快捷键）</td><td>live templates</td><tdstyle="text-align: left;">可以自定义一些<br />类似psvm的代码模板，<br />减少敲重复代码</td><td></td></tr><tr class="odd"><td></td><td>postfix completion</td><td style="text-align: left;">常用：<br />- for 循环<br />- nn判断非空<br />- return 返回<br />- field 创建类中的属性</td><td></td></tr><tr class="even"><td><strong>3. 万能神器</strong></td><td>alt + Enter</td><td style="text-align: left;">遇事不决，alt Enter</td><td></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>EnjoyCoding</category>
      
      <category>IDEA使用技巧</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Lambda与Stream笔记01--Lambda基础语法</title>
    <link href="/2022/05/15/EnjoyCoding/Java/Stream/LambdaNotes01/"/>
    <url>/2022/05/15/EnjoyCoding/Java/Stream/LambdaNotes01/</url>
    
    <content type="html"><![CDATA[<h3id="lambda表达式与stream笔记01--lambda基础语法">Lambda表达式与Stream笔记01--Lambda基础语法</h3><h4 id="初体验">初体验</h4><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><pre><code class="hljs java">    List&lt;Employee&gt; employees = Arrays.asList(<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-number">3333.33f</span>),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">30</span>, <span class="hljs-number">6666.33f</span>),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-number">40</span>, <span class="hljs-number">2222.33f</span>),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;赵六&quot;</span>, <span class="hljs-number">35</span>, <span class="hljs-number">5500.33f</span>),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;田七&quot;</span>, <span class="hljs-number">50</span>, <span class="hljs-number">7000.33f</span>)<br>    );<br><br>    <span class="hljs-keyword">public</span> List&lt;Employee&gt; <span class="hljs-title function_">filterEmployee</span><span class="hljs-params">(List&lt;Employee&gt; employees, MyPredicate&lt;Employee&gt; myPredicate)</span> &#123;<br>        List&lt;Employee&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (Employee e: employees) &#123;<br>            <span class="hljs-keyword">if</span> (myPredicate.test(e)) &#123;<br>                list.add(e);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-comment">// 匿名内部类</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Employee&gt; list = filterEmployee(employees, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyPredicate</span>&lt;Employee&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">test</span><span class="hljs-params">(Employee employee)</span> &#123;<br>                <span class="hljs-keyword">return</span> employee.getSalary() &gt;= <span class="hljs-number">5000</span>;<br>            &#125;<br>        &#125;);<br>        list.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-comment">// Lambda表达式</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Employee&gt; list = filterEmployee(employees, (e) -&gt; e.getSalary() &gt;= <span class="hljs-number">5000</span>);<br>        list.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-comment">// Stream API</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test03</span><span class="hljs-params">()</span> &#123;<br>        employees.stream()<br>                .filter((e) -&gt; e.getSalary() &gt;= <span class="hljs-number">5000</span>)<br><span class="hljs-comment">//                .limit(2)       // 限制输出条数</span><br><span class="hljs-comment">//                .map(Employee::getName)         // 只输出名字</span><br>                .forEach(System.out::println);<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="基础语法">基础语法</h4><ul><li><h5 id="箭头操作符lambda操作符--">箭头操作符(Lambda操作符)-&gt;</h5><ul><li>左侧：Lambda 表达式的参数列表</li><li>右侧：Lambda 表达式中所需执行的功能，即Lambda 体</li></ul></li><li><h5 id="语法格式">语法格式</h5><ol type="1"><li><p>无参数，无返回值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// () -&gt; states;</span><br><span class="hljs-comment">// eg：</span><br><span class="hljs-type">Runnable</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> () -&gt; System.out.println(<span class="hljs-string">&quot;Hello Lambda&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>有一个参数，无返回值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// eg:</span><br>Consumer&lt;String&gt; con = (x) -&gt; System.out.println(x);<br><span class="hljs-comment">// or (只有一个参数时，可以省略小括号，但还是推荐写上)</span><br>Consumer&lt;String&gt; con1 = x -&gt; System.out.println(x);<br></code></pre></td></tr></table></figure></li><li><p>有两个以上参数，有返回值，且Lambda体中有多条语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 需要用大括号将Lambda体括起来</span><br>Comparator&lt;Integer&gt; com = (x, y) -&gt; &#123;<br>System.out.println(<span class="hljs-string">&quot;函数式接口&quot;</span>);<br><span class="hljs-keyword">return</span> Integer.compare(x, y);<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>Lambda体中只有一条语句，且有返回值：return和大括号都可以省略：</p></li></ol><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Comparator&lt;Integer&gt; com = (x, y) -&gt; Integer.compare(x, y);<br></code></pre></td></tr></table></figure></p><ol start="5" type="1"><li>Lambda表达式的参数列表的数据类型可以省略不写，因为JVM编译器可以根据上下文推断出数据类型（“类型推断”）。</li></ol></li><li><h5id="lambda表达式需要函数式接口的支持">Lambda表达式需要“函数式接口”的支持</h5><ul><li>函数式接口：接口中只有一个抽象方法时，称为函数式接口。<ul><li>可以使用注解 <span class="citation"data-cites="FunctionalInterface">@FunctionalInterface</span>修饰，以检查是否是函数式接口</li></ul></li></ul></li></ul><h4 id="java8-内置的四大核心函数式接口">Java8内置的四大核心函数式接口</h4><ul><li><p>Consumer<T> ： 消费型接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(T t)</span>;<br></code></pre></td></tr></table></figure></li><li><p>Supplier<T> ：供给型接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">T <span class="hljs-title function_">get</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure></li><li><p>Function&lt;T, R&gt; ： 函数型接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">R <span class="hljs-title function_">apply</span><span class="hljs-params">(T t)</span>;<br></code></pre></td></tr></table></figure></li><li><p>Predicate<T> ： 断言型接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-title function_">test</span><span class="hljs-params">(T t)</span>;<br></code></pre></td></tr></table></figure></li></ul><h4 id="方法引用">方法引用</h4><p>​ 若Lambda 体中的内容有方法已经实现了，可以使用“方法引用”</p><ul><li><h5 id="三种语法格式">三种语法格式：</h5><ul><li><p>对象::实例方法名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Consumer&lt;String&gt; con = System.out::println;<br></code></pre></td></tr></table></figure></li><li><p>类::静态方法名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Comparator&lt;Integer&gt; com = Integer::compare;<br></code></pre></td></tr></table></figure></li><li><p>类::实例方法名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">BiPredicate&lt;String, String&gt; bp = String::equals;<br></code></pre></td></tr></table></figure></li></ul></li><li><h5 id="注意事项">注意事项：</h5><ul><li>Lambda体中调用方法的参数列表与返回值类型，要与函数式接口中抽象方法的保持一致</li><li>若Lambda参数列表中的第一个参数是实例方法的调用者，第二个参数是该实例方法的参数时，可以使用语法格式类::实例方法名</li></ul></li></ul><h4 id="构造器引用">构造器引用</h4><ul><li><h5 id="语法格式-1">语法格式：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">ClassName::<span class="hljs-keyword">new</span><br><br><span class="hljs-comment">// eg: (调用的是无参构造函数)</span><br>Supplier&lt;String&gt; sup = String::<span class="hljs-keyword">new</span>;<br><br><span class="hljs-comment">// 调用有参构造函数： 借助 Function接口</span><br>Function&lt;String, String&gt; fun = String::<span class="hljs-keyword">new</span>;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>EnjoyCoding</category>
      
      <category>Java</category>
      
      <category>Lambda表达式;Stream API</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Lambda与Stream笔记02--Stream API</title>
    <link href="/2022/05/14/EnjoyCoding/Java/Stream/StreamAPINotes01/"/>
    <url>/2022/05/14/EnjoyCoding/Java/Stream/StreamAPINotes01/</url>
    
    <content type="html"><![CDATA[<h3id="lambda表达式与stream笔记02--stream-api">Lambda表达式与Stream笔记02--StreamAPI</h3><h4 id="stream-基础知识">Stream 基础知识</h4><ul><li><h5 id="stream的三个操作步骤">Stream的三个操作步骤：</h5><p>（1）创建Stream</p><p>（2）中间操作</p><p>（3）终止操作（终端操作）</p></li><li><h5 id="创建stream的四种方式">创建Stream的四种方式：</h5><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1. 通过Collection 系列集合提供的 stream() 或 parallelStream()</span><br>      List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>      Stream&lt;String&gt; stream1 = list.stream();<br>  <br>      <span class="hljs-comment">// 2. 通过Arrays中的静态方法 stream() 获取数组流</span><br>      String[] strings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">10</span>];<br>      Stream&lt;String&gt; stream2 = Arrays.stream(strings);<br>  <br>      <span class="hljs-comment">// 3. 通过Stream中的静态方法 of()</span><br>      Stream&lt;String&gt; stream3 = Stream.of(<span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-string">&quot;bb&quot;</span>, <span class="hljs-string">&quot;cc&quot;</span>);<br>  <br>      <span class="hljs-comment">// 4. 创建无限流</span><br>      <span class="hljs-comment">// (1) 迭代</span><br>      Stream&lt;Integer&gt; stream41 = Stream.iterate(<span class="hljs-number">0</span>, (x) -&gt; x + <span class="hljs-number">2</span>);<br>  <br>      <span class="hljs-comment">// (2) 生成</span><br>      Stream&lt;Double&gt; stream42 = Stream.generate(Math::random);<br></code></pre></td></tr></table></figure></li><li><h5 id="stream-的中间操作">Stream 的中间操作</h5><ul><li><h6 id="惰性求值">惰性求值</h6><p>多个中间操作可以连接起来形成一个流水线，除非流水线上触发终止操作，否则中间操作不会执行任何的处理，而在终止操作时一次性全部处理，称为“惰性求值”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 中间操作： 不会执行任何操作</span><br>      Stream&lt;Employee&gt; stream = employees.stream()<br>              .filter((e) -&gt; &#123;<br>                  System.out.println(<span class="hljs-string">&quot;Stream API 的中间操作&quot;</span>);<br>                  <span class="hljs-keyword">return</span> e.getAge() &gt; <span class="hljs-number">35</span>;<br>              &#125;);<br>    <br>      <span class="hljs-comment">// 终止操作： 一次性执行全部内容，即 “惰性求值”</span><br>      stream.forEach(System.out::println); <span class="hljs-comment">// 若注释此行，不会有任何输出</span><br></code></pre></td></tr></table></figure></li><li><h6 id="筛选与切片">筛选与切片</h6><table><thead><tr class="header"><th>操作</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>fliter</td><td>接收 Lambda ，从流中排除某些元素</td></tr><tr class="even"><td>limit</td><td>截断流，使元素不超过给定数量</td></tr><tr class="odd"><td>skip(n)</td><td>跳过元素，返回一个扔掉了前n个元素的流</td></tr><tr class="even"><td>distinct</td><td>筛选，通过元素的hashcode() 和 equals 去除重复元素</td></tr></tbody></table></li><li><h6 id="映射">映射</h6><table><colgroup><col style="width: 10%" /><col style="width: 89%" /></colgroup><thead><tr class="header"><th>操作</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>map</td><td>接收lambda，将元素转换成其他形式或提取信息。接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</td></tr><tr class="even"><td>flatMap</td><td>接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有的流连接成一个流。</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// map</span><br>List&lt;String&gt; list = Arrays.asList(<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-string">&quot;bbb&quot;</span>, <span class="hljs-string">&quot;ccc&quot;</span>, <span class="hljs-string">&quot;ddd&quot;</span>);<br>list.stream()<br>    .map(String::toUpperCase)<br>    .forEach(System.out::println);<br></code></pre></td></tr></table></figure></li><li><h6 id="排序">排序</h6><table><thead><tr class="header"><th>操作</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>sorted</td><td>自然排序</td></tr><tr class="even"><td>sorted(Comparator com)</td><td>定制排序</td></tr></tbody></table></li></ul></li><li><h5 id="stream-的终止操作">Stream 的终止操作</h5><ul><li><h6 id="查找与匹配">查找与匹配</h6><table><thead><tr class="header"><th>操作</th><th>说明</th><th>返回值</th></tr></thead><tbody><tr class="odd"><td>allMatch</td><td>检查是否匹配所有元素</td><td>boolean</td></tr><tr class="even"><td>anyMatch</td><td>检查是否匹配至少一个元素</td><td>boolean</td></tr><tr class="odd"><td>noneMatch</td><td>检查是否没有匹配所有元素</td><td>boolean</td></tr><tr class="even"><td>findFirst</td><td>返回第一个元素</td><td>Optional<T></td></tr><tr class="odd"><td>findAny</td><td>返回当前流中的任意元素</td><td>Optional<T></td></tr><tr class="even"><td>count</td><td>返回流中元素的个数</td><td>Long</td></tr><tr class="odd"><td>max(Comparator com)</td><td>返回流中最大值</td><td>Optional<T></td></tr><tr class="even"><td>min(Comparator com)</td><td>返回流中最小值</td><td>Optional<T></td></tr></tbody></table><p>--Optional容器：操作结果可能为空时，返回Optional容器，解决空指针异常</p></li><li><h6 id="规约">规约</h6><ul><li><p>reduce(T identity, BinaryOperator bo) ---------------不可能为空，因为有初始值 identity， 所以返回 T</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; list = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>);<br><span class="hljs-type">Integer</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> list.stream()<br>                  .reduce(<span class="hljs-number">0</span>, Integer::sum);<br>System.out.println(sum);<br></code></pre></td></tr></table></figure></li><li><p>reduce(BinaryOperator bo) --------------可能为空，返回Optional</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Optional&lt;Integer&gt; op = list.stream()<br>                           .reduce(Integer::sum);<br>System.out.println(op.get());<br></code></pre></td></tr></table></figure></li></ul></li><li><h6 id="收集">收集</h6><ul><li><p>collect --将流转换成其他形式。接收一个Collector接口的实现，用于给流中的元素做汇总的方法。</p><p>​ --可以使用 Collectors工具类中提供的诸多静态方法获取已实现的收集器。</p><p>Collectors 中常用的收集器：</p><p>toList 、toSet、groupingBy（分组）</p></li></ul></li></ul></li><li><p>并行流与顺序流</p><p>​ 调用 parallel() 方法或 sequential() 切换并行流 或 串行流</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>EnjoyCoding</category>
      
      <category>Java</category>
      
      <category>Lambda表达式;Stream API</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java集合框架笔记03--Map;Collections工具类</title>
    <link href="/2022/05/10/EnjoyCoding/Java/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/JavaCollectionNotes03/"/>
    <url>/2022/05/10/EnjoyCoding/Java/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/JavaCollectionNotes03/</url>
    
    <content type="html"><![CDATA[<h3 id="java集合框架笔记03">Java集合框架笔记03</h3><h4 id="map-体系">Map 体系</h4><div data-align="center"><p><img src="https://lics-blogs-1258546254.cos.ap-nanjing.myqcloud.com/images/JavaCollectionNotes/02_Map.png" width="25%" style="center"/>`</p></div><ul><li><h5 id="map特点">Map特点</h5><p>（1）存储任意键值对</p><p>（2）键：无序、无下标、不允许重复（唯一）</p><p>（3）值：无序、无下标、允许重复</p></li><li><h5 id="遍历方法">遍历方法</h5><ul><li><p>keySet</p></li><li><p>entrySet （效率高于keySet）</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs java">Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><span class="hljs-comment">// 添加元素</span><br>map.put(<span class="hljs-string">&quot;cn&quot;</span>, <span class="hljs-string">&quot;中国&quot;</span>);<br>map.put(<span class="hljs-string">&quot;uk&quot;</span>, <span class="hljs-string">&quot;英国&quot;</span>);<br>map.put(<span class="hljs-string">&quot;usa&quot;</span>, <span class="hljs-string">&quot;美国&quot;</span>);<br><span class="hljs-comment">// map.put(&quot;cn&quot;, &quot;zhongguo&quot;); 会覆盖 “中国” 的值</span><br><br><span class="hljs-comment">// 遍历--两种方式：（1） keySet （2）entrySet</span><br>System.out.println(<span class="hljs-string">&quot;====使用 keySet 遍历====&quot;</span>);<br><span class="hljs-keyword">for</span> (String key: map.keySet()) &#123;<br>    System.out.println(key + <span class="hljs-string">&quot;-----------&quot;</span> + map.get(key));<br>&#125;<br><br>System.out.println(<span class="hljs-string">&quot;====使用 entrySet 遍历====&quot;</span>);<br><span class="hljs-keyword">for</span> (Map.Entry&lt;String, String&gt; entry:  map.entrySet()) &#123;<br>    System.out.println(entry.getKey() + <span class="hljs-string">&quot;-----------&quot;</span> + entry.getValue());<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="map-实现类">Map 实现类</h4><h5 id="hashmap">HashMap</h5><ul><li><h5 id="属性">属性</h5><table><colgroup><col style="width: 4%" /><col style="width: 25%" /><col style="width: 6%" /><col style="width: 63%" /></colgroup><thead><tr class="header"><th style="text-align: left;"></th><th>属性</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">1</td><td>DEFAULT_INITIAL_CAPACITY</td><td>16</td><td>默认初始容量</td></tr><tr class="even"><td style="text-align: left;">2</td><td>DEFAULT_LOAD_FACTOR</td><td>0.75f</td><td>默认加载因子（达到容量的75%以后，进行扩容）</td></tr><tr class="odd"><td style="text-align: left;">3</td><td>TREEIFY_THRESHOLD</td><td>8</td><td>桶链表长度大于此值后，（且数组长度大于64---见&lt;5&gt;），将链表调整成树</td></tr><tr class="even"><td style="text-align: left;">4</td><td>UNTREEIFY_THRESHOLD</td><td>6</td><td>树的元素个数小于6时，调整回链表</td></tr><tr class="odd"><td style="text-align: left;">5</td><td>MIN_TREEIFY_CAPACITY</td><td>64</td><td>&lt;3&gt;中树化的另一个条件</td></tr></tbody></table></li><li><h5 id="总结">总结</h5><p>（1）HashMap刚创建时，table是null（节省空间），添加第一个元素时，table容量调整为16</p><p>（2）当元素个数大于阈值（cap*0.75）时，会进行扩容，容量变为原来的2倍（2倍：减少调整元素的个数）</p><p>（3）jdk1.8：</p><ul><li><p>当每个链表长度大于8，且数组元素个数大于64时，调整为红黑树，目的是提高执行效率</p></li><li><p>当链表长度小于6时，调整成链表</p></li></ul><p>（4）jdk1.8以前，链表是头插入，jdk1.8以后是尾插入</p><p>（5）线程不安全，运行效率快；允许用null作为key或value</p></li></ul><h5 id="hashtable">Hashtable</h5><ul><li>线程安全，运行效率慢；不允许null作为key或value</li></ul><h5 id="properties">Properties</h5><ul><li>Hashtable的子类，要求key、value都是String。通常用于配置文件的读取。</li></ul><h5 id="treemap">TreeMap</h5><ul><li>实现了SortedMap接口，可以对key自动排序</li></ul><h4 id="collections工具类">Collections工具类</h4><p>包含很多操作集合的静态方法。</p><p>（1）sort、binarySearch、reverse、shuffle、copy等</p><h4 id="集合数组相互转换">集合、数组相互转换</h4><ul><li><p>数组转集合后，得到的是受限集合，不能添加和删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] names = &#123;<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;王五&quot;</span>&#125;;<br>List&lt;String&gt; nameList = Arrays.asList(names);<br><span class="hljs-comment">// nameList.add(&quot;赵六&quot;);    // 报错：java.lang.UnsupportedOperationException</span><br>System.out.println(nameList);<br></code></pre></td></tr></table></figure></li><li><p>把基本类型的数组转成集合时，需要修改为包装类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] nums = &#123;<span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>, <span class="hljs-number">400</span>, <span class="hljs-number">500</span>&#125;;<br>List&lt;<span class="hljs-type">int</span>[]&gt; list = Arrays.asList(nums);     <span class="hljs-comment">// 返回类型：数组 的列表</span><br>Integer[] nums2 = &#123;<span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>, <span class="hljs-number">400</span>, <span class="hljs-number">500</span>&#125;;<br>List&lt;Integer&gt; integers = Arrays.asList(nums2);    <span class="hljs-comment">// 返回类型：包装类  Integer的列表</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>EnjoyCoding</category>
      
      <category>Java</category>
      
      <category>Java集合框架</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java集合框架笔记02--泛型;Set</title>
    <link href="/2022/05/05/EnjoyCoding/Java/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/JavaCollectionNotes02/"/>
    <url>/2022/05/05/EnjoyCoding/Java/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/JavaCollectionNotes02/</url>
    
    <content type="html"><![CDATA[<h3 id="java集合框架笔记02">Java集合框架笔记02</h3><h4 id="泛型">泛型</h4><ul><li><h5 id="基本概念">基本概念</h5><ul><li><p>本质：参数化类型，把类型作为参数传递</p></li><li><p>常见形式：泛型类、泛型接口、泛型方法</p></li><li><p>语法：</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs java">&lt;T, ...&gt;     <span class="hljs-comment">// T称为类型占位符，表示一种引用类型</span><br></code></pre></td></tr></table></figure></li><li><p>好处：</p><p>（1）提高代码的重用性</p><p>（2）防止类型转换异常，提高代码的安全性</p></li><li><p>注意点：</p><p>（1）泛型只能 使用引用类型</p><p>（2）不同泛型对象之间不能相互赋值</p></li></ul></li><li><h5 id="泛型类的继承">泛型类的继承</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span>&lt;T1, T2&gt; &#123;<br>&#125;<br><br><span class="hljs-comment">// 子类不保留父类的泛型</span><br><span class="hljs-comment">// （1）没有类型  擦除</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span>&lt;A, B&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span> &#123; <br>    <span class="hljs-comment">// 等价于  class Son extends Father&lt;Object, Object&gt;</span><br>&#125;<br><br><span class="hljs-comment">// （2）具体类型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son2</span>&lt;A, B&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span>&lt;Integer, String&gt; &#123;<br>&#125;<br><br><span class="hljs-comment">// 子类保留父类的泛型</span><br><span class="hljs-comment">// （1）全部保留</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son3</span>&lt;T1, T2, A, B&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span>&lt;T1, T2&gt;&#123;<br>&#125;<br><br><span class="hljs-comment">// （2）部分保留</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son4</span>&lt;T2, A, B&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span>&lt;Integer, T2&gt;&#123;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h5 id="泛型在继承方面的体现">泛型在继承方面的体现</h5><ul><li><p>类A是类B的父类，但G<A>和G<B>二者不具备子父类关系，二者是并列关系</p><ul><li>G<A>和G<B>二者共同的父类是G&lt;?&gt; --------- ?为通配符</li></ul></li><li><p>类（接口）A是类B的父类（接口），A<G>是B<G>的父类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">AbstractList&lt;String&gt; list1 = <span class="hljs-literal">null</span>;<br>List&lt;String&gt; list2 = <span class="hljs-literal">null</span>;<br>ArrayList&lt;String&gt; list3 = <span class="hljs-literal">null</span>;<br>list1 = list3;      <span class="hljs-comment">// 允许</span><br>list2 = list3;      <span class="hljs-comment">// 允许</span><br></code></pre></td></tr></table></figure></li><li><p>使用通配符后的访问要求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>list1.add(<span class="hljs-string">&quot;AA&quot;</span>);<br>list1.add(<span class="hljs-string">&quot;BB&quot;</span>);<br>list1.add(<span class="hljs-string">&quot;CC&quot;</span>);<br><br>List&lt;?&gt; list2 = list1;<br><br><span class="hljs-comment">// 添加（写入）：对于List&lt;?&gt;不能向其内部添加数据</span><br><span class="hljs-comment">// 除了添加null之外。</span><br><span class="hljs-comment">//list2.add(&quot;AA&quot;);       // 编译报错</span><br>list2.add(<span class="hljs-literal">null</span>);         <span class="hljs-comment">// 允许</span><br><br><span class="hljs-comment">// 读取：允许读取数据，读取的数据类型为Object</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> list2.get(<span class="hljs-number">0</span>);<br>System.out.println(o);<br></code></pre></td></tr></table></figure></li><li><p>有限制条件的通配符的使用</p><ul><li>? ： （-∞, +∞）</li><li>? extends Father: （-∞, Father]</li><li>? super Father : [Father, +∞）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        ?   ： （-∞, +∞）</span><br><span class="hljs-comment">        ? extends Father: （-∞, Father]</span><br><span class="hljs-comment">        ? super Father  :  [Father, +∞）</span><br><span class="hljs-comment">         */</span><br><br>        List&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span>&gt; list1 = <span class="hljs-literal">null</span>;<br>        List&lt;? <span class="hljs-built_in">super</span> Father&gt; list2 = <span class="hljs-literal">null</span>;<br><br>        List&lt;Student&gt; list3 = <span class="hljs-literal">null</span>;<br>        List&lt;Father&gt; list4 = <span class="hljs-literal">null</span>;<br>        List&lt;Object&gt; list5 = <span class="hljs-literal">null</span>;<br><br>        list1 = list3;<br>        list1 = list4;<br>        <span class="hljs-comment">// list1 = list5;   //不允许</span><br><br>        <span class="hljs-comment">// list2 = list3;   //不允许</span><br>        list2 = list4;<br>        list2 = list5;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="泛型集合">泛型集合</h4><ul><li><h5 id="基本概念-1">基本概念</h5><ul><li>参数化类型、类型安全的集合，强制集合元素的类型必须一致。</li><li>特点：<ul><li>编译时即可检查，而非运行时抛出异常。</li><li>访问时，不必类型转换。</li><li>不同泛型之间引用不能相互赋值，泛型不存在多态。</li></ul></li></ul></li></ul><h4 id="set">Set</h4><ul><li><h5 id="基本概念-2">基本概念</h5><ul><li>特点：无序、无下标、元素不可重复</li><li>方法：全部继承自Collection中的方法</li></ul></li><li><h5 id="遍历方式">遍历方式</h5><ul><li>增强for</li><li>迭代器</li></ul></li></ul><h4 id="set-的实现类">Set 的实现类</h4><ul><li><h5 id="hashset">HashSet</h5><ul><li>基于HashCode计算元素的存放位置</li><li>当存入元素的哈希码相同时，调用equals确认，如果结果为true，拒绝后者存入</li><li>存储结构：哈希表（数组+链表+红黑树）</li></ul></li><li><h5 id="treeset">TreeSet</h5><ul><li>基于排列顺序实现元素不重复</li><li>实现了SortedSet接口，对集合元素自动排序</li><li>元素对象的类型必须实现Comparable接口，指定排序的规则<ul><li>通过该接口中的CompareTo方法确定是否为重复元素</li></ul></li><li>存储结构：红黑树</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>EnjoyCoding</category>
      
      <category>Java</category>
      
      <category>Java集合框架</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java集合框架笔记01--Collection基础概念; List及实现类</title>
    <link href="/2022/05/01/EnjoyCoding/Java/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/JavaCollectionNotes01/"/>
    <url>/2022/05/01/EnjoyCoding/Java/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/JavaCollectionNotes01/</url>
    
    <content type="html"><![CDATA[<h3 id="java集合框架笔记01">Java集合框架笔记01</h3><h4 id="基础概念">基础概念</h4><ul><li>集合： 对象的容器，实现了对 对象 常用的操作，类似数组的功能。</li><li>集合与数组的区别：<ul><li>数组长度固定，集合长度不固定。</li><li>数组可以存储基本类型和引用类型，集合只能存储引用类型</li></ul></li></ul><h4 id="collection体系集合">Collection体系集合</h4><ul><li><h5 id="collection体系集合框架">Collection体系集合框架：</h5><p><img src="https://lics-blogs-1258546254.cos.ap-nanjing.myqcloud.com/images/JavaCollectionNotes/01_Collection.png" width="70%" style="center"/>`</p></li><li><h5 id="collection父接口">Collection父接口</h5><ul><li><h6 id="方法">方法：</h6><ul><li>boolean add(E e) // 添加一个元素</li><li>boolean addAll(Collection c) // 将集合c中的所有元素添加到此集合</li><li>void clear() // 清空集合中的所有元素</li><li>boolean contains(Object o) // 检查集合中是否包含o元素</li><li>boolean containsAll(Collection c) //检查集合中是否包含c中所有元素</li><li>boolean equals(Object obj) // equals</li><li>boolean isEmpty() // 判断集合是否为空集合</li><li>boolean remove(Object o) // 移除o元素</li><li>boolean removeAll(Collection c) //移除也包含在集合c中的所有元素</li><li>boolean retainAll(Collection c) //相当于交集，仅此集合中保留也包含在c中的元素</li><li>int size() // 返回集合中的元素的个数</li><li>Object[] toArray() // 将集合转换成数组</li></ul></li><li><h6 id="遍历collection">遍历Collection：</h6><ul><li><p>增强for （for-each）</p></li><li><p>迭代器（Iterator）</p><p>（1）有三个方法：</p><ul><li>hasNext(); // 有没有下一个元素</li><li>next(); // 获取下一个元素</li><li>remove(); // 删除一个元素</li></ul><p>（2）使用迭代器遍历集合的典型代码段：</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Iterator</span> <span class="hljs-variable">it</span> <span class="hljs-operator">=</span> collection.iterator();<br><span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> (String) it.next();<br>    System.out.println(s);<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * !!! 不允许遍历过程中使用Collection中的其他方法改变集合中的元素 !!!</span><br><span class="hljs-comment">     * 否则将抛出“ConcurrentModificationException” 并发修改异常</span><br><span class="hljs-comment">     * 但可以使用迭代器中的remove()方法删除元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">// collection.remove(s);    // 不允许！ 抛出ConcurrentModificationException异常</span><br>    <span class="hljs-comment">// it.remove();             // 允许</span><br>&#125;<br></code></pre></td></tr></table></figure><p>​</p></li></ul></li></ul></li><li><h5 id="list子接口">List子接口</h5><ul><li><h6 id="特点">特点：</h6><p>有序、有下标、元素可重复</p></li><li><h6 id="方法-1">方法：</h6><p>包含Collection父接口中的全部方法，并包含以下方法：</p><ul><li>void add(int index, E element) // 将元素插入指定位置</li><li>boolean addAll(int index, Collection c) //将c中的所有元素插入到此集合的指定位置</li><li>E get(int index) // 获取指定位置的元素</li><li>List subList(int fromIndex, int toIndex) // 截取部分列表</li><li>indexOf(Object o) // 获取o第一次出现的位置</li><li>lastIndexOf(Object o) //</li><li>remove(int index)</li></ul></li><li><h6 id="遍历方式">遍历方式：</h6><p>可以使用for、增强for、迭代器遍历</p></li><li><h6 id="listiterator">ListIterator：</h6><p>比Collection的Iterator功能更强大，既可以前向遍历，又可以后向遍历，还可以在遍历过程中添加、修改或删除元素。</p><p>​ 包含以下方法：</p><ul><li>void add(E e) // 将e插入list</li><li>boolean hasNext()<br /></li><li>boolean hasPrevious()</li><li>E next() // 返回下一个元素并移动游标</li><li>int nextIndex() // 返回下个元素的下标</li><li>E previous()</li><li>int previousIndex()</li><li>void remove() // 删除上一次调用next或previous返回的元素</li><li>void set(E e) // 修改上一次调用next或previous返回的元素</li></ul></li></ul></li><li><h5 id="list的实现类">List的实现类：</h5><ul><li>ArrayList<ul><li>数组结构实现，查询快、增删慢</li><li>运行效率快、线程不安全</li></ul></li><li>Vector<ul><li>数组结构实现，查询快、增删慢</li><li>运行效率慢、线程安全</li></ul></li><li>LinkedList<ul><li>链表结构实现，增删快、查询慢</li></ul></li></ul></li><li><h5 id="arraylist-源码分析">ArrayList 源码分析</h5><p>​ DEFAULT_CAPACITY = 10 默认容量大小</p><p>​ --如果没有像集合中添加任何元素时，容量是0；添加一个元素之后，容量是10</p><p>​ elementData 存放元素的数组</p><p>​ size 实际元素个数</p><p>​ add方法，在数组容量不够时，扩容为原来的1.5倍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">grow</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    <span class="hljs-comment">// overflow-conscious code</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">oldCapacity</span> <span class="hljs-operator">=</span> elementData.length;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (newCapacity - minCapacity &lt; <span class="hljs-number">0</span>)<br>        newCapacity = minCapacity;<br>    <span class="hljs-keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="hljs-number">0</span>)<br>        newCapacity = hugeCapacity(minCapacity);<br>    <span class="hljs-comment">// minCapacity is usually close to size, so this is a win:</span><br>    elementData = Arrays.copyOf(elementData, newCapacity);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h5 id="linkedlist-源码分析">LinkedList 源码分析</h5><p>基于双向链表</p><p>int size 集合大小</p><p>Node first 链表的头节点</p><p>Node last 链表的尾节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;E&gt; &#123;<br>    E item;<br>    Node&lt;E&gt; next;<br>    Node&lt;E&gt; prev;<br><br>    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;<br>        <span class="hljs-built_in">this</span>.item = element;<br>        <span class="hljs-built_in">this</span>.next = next;<br>        <span class="hljs-built_in">this</span>.prev = prev;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">linkLast</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; l = last;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(l, e, <span class="hljs-literal">null</span>);<br>    last = newNode;<br>    <span class="hljs-keyword">if</span> (l == <span class="hljs-literal">null</span>)<br>        first = newNode;<br>    <span class="hljs-keyword">else</span><br>        l.next = newNode;<br>    size++;<br>    modCount++;<br>&#125;<br></code></pre></td></tr></table></figure><p>​</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>EnjoyCoding</category>
      
      <category>Java</category>
      
      <category>Java集合框架</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>深入浅出MySQL笔记02--开发篇</title>
    <link href="/2022/04/04/EnjoyCoding/MySQL/MySQLNotes02/"/>
    <url>/2022/04/04/EnjoyCoding/MySQL/MySQLNotes02/</url>
    
    <content type="html"><![CDATA[<h2 id="深入浅出mysql-开发篇">深入浅出MySQL 开发篇</h2><h3 id="表类型存储引擎的选择">1. 表类型（存储引擎）的选择</h3><h5 id="存储引擎概述">存储引擎概述</h5><p>​插件式存储引擎是MySQL数据库重要特性之一，可根据应用的需要选择如何存储和索引数据、是否使用事务等。MySQL默认支持多种存储引擎，以适应不同领域的db应用需求。</p><p>​ MySQL 5.0 支持的存储引擎：MyISAM, InnoDB, DBD, MEMORY,MERGE,等。其中InnoDB, DBD提供事务安全表，其他都是非事务安全表。</p><p>​ MySQL 5.5 之前的默认存储引擎是MyISAM，5.5 之后改为了InnoDB。</p><h5 id="各种存储引擎的特性">各种存储引擎的特性</h5><h6 id="myisam">1. MyISAM</h6><p>​不支持事务、不支持外键，优势是访问速度快，对事务完整性没有要求或以SELECTINSERT为主的应用可以使用这个引擎创建表。</p><p>​ 每个MyISAM在磁盘上存储成3个文件，其文件名为表名，扩展名分别是</p><ul><li><p>.frm （存储表定义）</p></li><li><p>.MYD （MYData, 存储数据）</p></li><li><p>.MYI （MYIndex, 存储索引）</p><p>MyISAM表还支持3种不同的存储格式：</p></li><li><p>静态（固定长度）表</p></li><li><p>动态表</p></li><li><p>压缩表</p></li></ul><p>​静态表是默认的存储格式，表中字段都是非变长字段，从而每个记录长度固定，优点是存储迅速，容易缓存，出故障易恢复；缺点是占用空间比动态表多。静态表数据在存储时会按列宽定义补足空格，应用访问时空格在返回给应用之前被去掉。​动态表中包含变长字段，记录长度不固定，占用空间少，但频繁地更新和删除记录会产生碎片，需定期执行OPTIMIZETABLE 或 myisamchk-r来改善命令。出故障不易维护。 ​压缩表由myisampack工具创建，占据非常小的磁盘空间。每个记录被单独压缩，只有非常小的访问开支。</p><h6 id="innodb">2. InnoDB</h6><p>​提供了具有提交、回滚和崩溃恢复能力的事务安全。对比MyISAM，InnoDB写的处理效率差一些，并会占用更多的磁盘空间以保留数据和索引。</p><p>​ InnoDB的表的特点：</p><ol type="1"><li><p>自动增长列</p><p>定义方式：col_def auto_increment</p><p>​ eg: create table tname (i smallint not null<strong>auto_increment</strong>)</p><p>设置自动增长列的初始值：ALTER TABLE *** AUTO_INCREMENT = n(默认从1开始)</p><p>查询当前线程最后插入记录使用的值：select LAST_INSERT_ID();</p><p>对于InnoDB，自动增长列<strong>必须是索引</strong>，也必须是<strong>组合索引的第一列</strong>。</p></li><li><p>外键约束</p><ol type="1"><li><p>MySQL支持外键的存储引擎只有InnoDB。在创建外键时，要求父表必须有对应的索引，子表在创建外键时也会自动创建对应的索引。</p></li><li><p>创建索引时，可以指定在删除、更新父表时，对子表进行的相应操作，包括：</p></li></ol><ul><li>RESTRICT：限制在子表有关联记录的情况下父表不能更新</li><li>CASCADE: 父表在更新和删除时，更新或删除子表对应记录</li><li>SET NULL: 父表在更新和删除时，子表对应记录的对应字段被SET NULL</li><li>NO ACTION: 同RESTRICT</li></ul><ol start="3" type="1"><li>当某个表被其他表创建了外键参照，该表的对应索引或主键禁止被删除。</li><li>查看外键信息：show create table 和 show table status</li></ol></li><li><p>存储方式</p><ul><li>使用共享表空间存储，创建的表的表结构存在.frm文件中，数据和索引存在innodb_data_home_dir和innodb_data_file_path定义的表空间中，可以是多个文件。</li><li>使用多表空间存储，创建的表的表结构存在.frm文件中，但每个表的数据和索引单独保存在.ibd中。如果是分区表，则每个分区对应单独的.ibd文件，文件名是“表名+分区名”。</li></ul><p>​多表空间的数据文件无大小限制，不需设置初始大小和文件的最大限制、扩展大小等参数。</p></li></ol><h5 id="memory">3. MEMORY</h5><p>​使用存在于内存中的内容创建表。每个MEMORY表只对应一个磁盘文件，格式是.frm。MEMORY表访问非常快，因为数据放在内存中，且默认用HASH索引（创建索引时可以指定为BTREE），但一旦服务关闭，表中数据就会丢掉。</p><p>​服务器需要足够内存维持所有同一时间使用的MEMORY表，当不再需要MEMORY表时，需要执行DELETE或 TRUNCATE TABLE或DROP TABLE释放其占用的内存。</p><p>​MEMORY主要用于内容变化不频繁的代码表，或作为统计操作的中间结果表，便于高效对中间结果进行分析。</p><h5 id="merge">4. MERGE</h5><p>​是一组MyISAM表的组合，这些MyISAM表必须结构完全相同，MERGE表本身没有数据，对MERGE表的删改查操作实际是对内部的MyISAM表进行的。对MERGE表的插入操作通过INSERT_METHOD子句定义插入的表。</p><p>​<strong>对MERGE表的DROP操作只是删除MERGE表的定义</strong>，对内部表没有任何影响。</p><p>​ MERGE表 <strong>vs</strong>分区表：MERGE表并不能智能地将记录写到对应的表中，分区表可以。通常使用分区表透明地对多个表进行查询和更新操作。</p><h3 id="合适的数据类型">2. 合适的数据类型</h3><ul><li>对于字符类型，要根据存储引擎进行相应的选择</li><li>对精度要求较高的应用中，建议用定点数存储数值，以保证结果的正确性</li><li>对含有TEXT和BLOB字段的表，如果经常增删记录，要定期执行OPTIMIZETABLE对表进行碎片整理</li><li>日期类型如果要让不同时区的用户使用，最好使用TIMESTAMP，因为日期类型中只有它能和实际时区对应。</li></ul><h3 id="字符集">3. 字符集</h3><ul><li>如果应用需要处理各种文字，或将发布到不同语言的国家地区，应该选择Unicode(对MySQL来说就是UTF-8)字符集。</li><li>如果数据库只需要支持一般中文，数据量大且要求性能，应该选择双字节定长编码的中文字符集，eg：GBK。GBK中每个汉字只占2字节，而UTF-8汉字编码是3字节。<ul><li>如果应用主要处理英文字符，UTF-8更好，因为GBK等的西文编码也是2字节。</li></ul></li><li>如果数据库需要大量的比较、排序等字符运算，那么选择定长字符集处理速度更快。</li></ul><h3 id="索引">4. 索引</h3><p>​所有MySQL列类型都可以被索引。MyISAM和InnoDB的表默认创建的是BTREE索引；MEMORY默认使用HASH索引。</p><h5 id="设计索引的原则">设计索引的原则：</h5><ul><li>最适合索引的列是出现在WHERE子句中的列，或连接子句中指定的列</li><li>使用唯一索引：索引的列的基数（集合里的概念，不同的值的个数）越大，索引效果越好。eg，在出生日期列建索引比在性别（只有两个值）列效果好。</li><li>使用短索引：如果对字符串列进行索引，应尽可能指定一个前缀长度。短索引节省索引空间，也可能使查询更快；此外，对于较短的键值，索引高速缓存中的块能容纳更多键值，增加了找到行而不用读取索引中较多块的可能性。</li><li>利用最左前缀：</li><li>不要过度索引：额外的索引会占用额外磁盘空间，降低写操作的性能。修改表内容时，索引也需要更新甚至重构。</li><li>对于InnoDB的表<ul><li>记录默认按照一定的顺序保存<ul><li>有明确定义的主键：按主键顺序</li><li>无明确定义的主键但有唯一索引：按唯一索引顺序</li><li>都无：自动生成一个内部列，按该列顺序</li></ul></li><li>按照主键或内部列进行访问是最快的，所以InnoDB表尽可能指定主键</li><li>当表中多个列都是唯一时，选最常作为访问条件的列作为主键</li><li>InnoDB表的普通索引也会保存主键的键值，所以主键要尽可能短</li></ul></li></ul><h5 id="btree-索引和hash索引">BTREE 索引和HASH索引</h5><ul><li>HASH索引特点：<ul><li>只用于使用=或&lt;=&gt;操作符的等式比较</li><li>优化器不能使用HASH索引加速ORDER BY</li><li>只能用整个关键字来搜索一行</li></ul></li><li>对于BTREE索引，使用&gt; , &lt; , &gt;= , &lt;= , BETWEEN , != 或者&lt;&gt; , 或者 LIKE（模式不以通配符开始）时，都可以使用相关列上的索引</li></ul><h3 id="视图">5. 视图</h3><p>​视图（view）是一种虚拟存在的表，并不在数据库中实际存在，使用透明。</p><h5 id="视图相对于普通的表优势">视图相对于普通的表优势：</h5><ul><li>简单：用户无需关心后面对应的表结构、关联条件、筛选条件，对用户来说是过滤好的复合条件的结果集。</li><li>安全：用户只能访问被允许查询的结果集</li><li>数据独立：一旦视图结构确定，可以屏蔽表结构变化对用户的影响</li></ul><h5 id="视图操作">视图操作</h5><ul><li><p>创建或修改视图</p><p>创建视图需要有CREATE VIEW 权限，并对查询涉及的列有SELECT权限。若使用CREATE OR REPLACE或ALTER修改视图，还需要视图的DROP权限。</p><p>创建视图语法：</p><p>CREATE [OR REPLACE]</p><p>​ VIEW vname [(col_list)]</p><p>​ AS select_statement</p><p>修改视图语法：</p><p>ALTER</p><p>​ VIEW vname [(col_list)]</p><p>​ AS select_statement</p></li><li><p>删除视图</p><p>DROP VIEW [IF EXISES] vname</p></li><li><p>查看视图</p><p>MySQL 5.1开始 SHOW TABLES [STATUS]同时会显示视图信息。</p></li></ul><h3 id="存储过程和函数">6. 存储过程和函数</h3><p>​存储过程和函数是事先经过编译并存储在数据库中的一段SQL语句的集合，调用存储过程和函数可以简化工作，减少数据在数据库和应用服务器之间的传输，利于提高数据处理效率。</p><p>​存储过程和函数的区别在于函数必须有返回值，而存储过程没有，存储过程的参数可以使用IN,OUT, INOUT类型，函数的参数只能是IN。</p><h5 id="相关权限">相关权限</h5><ul><li>创建：需要CREATE ROUTINE 权限</li><li>修改或删除：需要ALTER ROUTINE 权限</li><li>执行：需要EXECUTE 权限</li></ul><h5 id="创建or修改存储过程和函数">创建or修改存储过程和函数</h5><p>CREATE PROCEDURE sp_name ([proc_param]) ​ [characteristic]routine_body</p><p>CREATE FUNCTION sp_name ([func_param]) ​ RETURNS type ​[characteristic] routine_body</p><h5 id="调用">调用</h5><p>CALL sp_name ([proc_param])</p><h5 id="存储过程的好处">存储过程的好处</h5><p>​处理逻辑封装在数据库端，调用者不需要了解中间的处理逻辑，一旦处理逻辑发生改变，只需要修改存储过程，而对调用者的程序完全没有影响。</p><h3 id="触发器">7. 触发器</h3><p>​触发器是与表有关的数据库对象，在满足定义条件时触发，并执行触发器中定义的语句集合。可以协助应用在数据库端确保数据的完整性。</p><h5 id="创建触发器">创建触发器</h5><p>CREATE TRIGGER trigger_name trigger_time trigger_event</p><p>ON tb1_name FOR EACH ROW trigger_stmt</p><p>触发器只能创建在永久表上， 不能对临时表创建触发器。</p><ul><li>trigger_time ：触发时间，可以是<ul><li>BEFORE , 在检查约束前触发</li><li>AFTER , 在检查约束后触发</li></ul></li><li>trigger_event：触发事件，可以是增删改</li></ul><p>对同一个表相同触发时间的相同触发事件，只能定义一个触发器。</p><p><strong>可以使用别名OLD和NEW来引用触发器中发生变化的记录内容。</strong></p><h5 id="触发顺序">触发顺序</h5><ul><li>对于有重复记录、需要进行UPDATE 操作的INSERT,触发器触发的顺序是BEFOREINSERT -&gt; BEFORE UPDATE -&gt; AFTER UPDATE;</li><li>对于没有重复记录的INSERT,就是简单执行INSERT, 触发顺序是BEFORE INSERT-&gt; AFTER INSERT</li><li><strong>对实际执行UPDATE 操作的记录，仍会执行BEFOREINSERT触发器的内容</strong></li></ul><h3 id="事务控制和锁定语句">8. 事务控制和锁定语句</h3><p>​默认情况下，表锁和行锁都是自动获得的，不需要额外命令。但是在有的情况下，用户需要明确进行锁表或进行事务的控制，以确保事务的完整性。</p><h5 id="lock-table-与-unlock-table">LOCK TABLE 与 UNLOCK TABLE</h5><ul><li>LOCK TABLES锁定用于当前线程的表，如果表被其他线程锁定，则当前线程会等待，直到可以获取所有锁定为止</li><li>UNLOCK TABLES 释放当前线程获得的任何锁定</li></ul><h5 id="事务控制">事务控制</h5><p>​ 默认情况下，MySQL是自动提交的。</p><ul><li>START TRANSACTION 或BEGIN 开始一项新的事务</li><li>COMMIT 和 ROLLBACK 用来提交或回滚事务</li><li>CHAIN 和 RELEASE 子句分别定义事务提交或回滚之后的操作，<ul><li>CHAIN 会立即启动一个新事务，并和刚才的事务有相同的隔离级别；</li><li>RELEASE 会断开和客户端的连接</li></ul></li><li>SET AUTOCOMMIT (=0)修改当前连接的提交方式，设为0时之后的所有事务都需要明确的命令进行提交或回滚。</li></ul><p><strong>如果在锁表期间，用start transaction开始一个新事务，会隐含执行unlock tables</strong></p><h3 id="sql中的安全问题">9. SQL中的安全问题</h3><h5 id="sql注入">SQL注入</h5><h3 id="mysql-分区">10. MySQL 分区</h3><p>​分区是指根据一定的规则，数据库把一个表分解成多个更小的、更容易管理的部分。对于访问数据库的应用来说，逻辑上只有一个表或一个索引，实际上这个表可能有数10个物理分区对象组成，每个分区都是一个独立对象，可以独自处理，可以作为表的一部分处理。分区对于应用来说是完全透明的，不影响应用的业务逻辑。</p><h5 id="分区的优点">分区的优点</h5><ul><li>和单个磁盘或文件系统相比，可以存储更多数据</li><li>优化查询。在Where子句中包含分区条件时，可以只扫描必要的一个或多个分区来提高查询效率；同时在涉及SUM和COUNT这类聚合函数的查询时，可以容易地在每个分区上并行处理，最终只需要汇总所有分区得到的结果</li><li>对于已经过期或不需要保存的数据，可以删除与这些数据有关的分区来快速删除数据</li><li>跨多个磁盘分散数据查询，以获得更大的查询吞吐量</li></ul><h5 id="分区概述">分区概述</h5><p>​分区有利于管理非常大的表，采用了分治逻辑，分区引入了分区键的概念。分区键用于根据某个区间值、特定值列表、HASH函数值执行数据的聚集，让数据根据规则分布在不同的分区中。</p><h5 id="分区类型">分区类型</h5><ul><li>RANGE分区：基于一个给定连续区间范围，把数据分配到不同分区</li><li>LIST分区：基于枚举出的值列表分区</li><li>HASH分区：基于给定的分区个数，分配数据</li><li>KEY分区：类似HASH分区</li></ul><p><strong>注意</strong>：无论哪种分区类型，都不能用主键/唯一键字段之外的其他字段分区</p><h5 id="range分区">Range分区</h5><p>利用取值范围将数据分成分区，区间要连续且不能互相重叠，使用VALUES LESSTHAN进行分区的定义。</p><p><strong>注意</strong>：每个分区都按顺序进行定义，从最低到最高。</p><p>可以使用VALUES LESS THANMAXVALUE子句提供给所有大于明确指定的最高值的值。</p><p>特别适用于：</p><ul><li>需要删除过期数据，eg：ALTER TABLE tname DROP PARTITION p0</li><li>经常运行包含分区键的查询</li></ul><h5 id="list-分区">List 分区</h5><p>建立离散的值列表告诉数据库特定的值属于哪个分区。</p><p>使用PARTITION BY LIST + VALUES IN (X,X)</p><p>LIST 分区不需要声明任何特定的顺序。</p><p>若试图插入的列值不包含在分区值列表中时，INSERT会失败并报错。</p><h5 id="columns分区">Columns分区</h5><p>可以细分为RANGE Columns和LISTColumns分区，都支持整数、日期时间、字符串三大数据类型。</p><p>Columns分区还支持多列分区。</p><h5 id="hash分区">Hash分区</h5><p>主要用来分散热点读，确保数据在预先确定个数的分区中尽可能平均分布。</p>]]></content>
    
    
    <categories>
      
      <category>EnjoyCoding</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>深入浅出MySQL笔记01--基础篇</title>
    <link href="/2022/04/01/EnjoyCoding/MySQL/MySQLNotes01/"/>
    <url>/2022/04/01/EnjoyCoding/MySQL/MySQLNotes01/</url>
    
    <content type="html"><![CDATA[<h2 id="深入浅出mysql-基础篇">深入浅出MySQL 基础篇</h2><h3 id="sql基础">1. SQL基础</h3><h5 id="sql分类">SQL分类</h5><ol type="1"><li>DDL语句：数据定义语言，定义不同的数据段、数据库、表、列、索引等数据库对象，常用关键字：create，drop，alter；</li><li>DML语句：数据操纵语句，增删改查以及检查数据完整性，常用关键字：insert，delete，update，select；</li><li>DCL语句：数据控制语句，控制不同数据段直接的许可和访问级别，定义了访问权限和安全级别，主要关键字：grant，revoke。</li></ol><h5 id="查看表定义">查看表定义</h5><ol type="1"><li><p>DESC tname</p></li><li><p>show create table tname ---- 可以看到存储引擎和字符集等信息</p><p>​ 使得记录能按字段竖向排列</p></li></ol><h5 id="修改表">修改表</h5><ol type="1"><li><p>修改表类型：ALTER TABLE tname MODIFY col_def [FIRST | AFTERcol_name]</p><p>​ col_def ：列定义，包含 col_name col_type [约束]</p></li><li><p>增加表字段：ALTER TABLE tname ADD col_def [FIRST | AFTERcol_name]</p></li><li><p>删除表字段：ALTER TABLE tname DROP col_name</p></li><li><p>字段改名：ALTER TABLE tname CHANGE old_col_name col_def [FIRST |AFTER col_name]</p><p>​ change <strong>vs</strong>modify：都可以修改表的列定义，但change可以修改列名称。另外，change需要写两遍列名，只需要修改列类型时，用modify。</p></li><li><p>修改字段排列顺序：FIRST | AFTER col_name</p><p>​ 上述124语句，ADD新增的字段默认在表最后，CHANGE &amp; MODIFY默认不改变字段位置。</p><p>​ FIRST ：将该列置于表最前</p><p>​ AFTER col_name： 将该列置于col_name列后</p></li><li><p>更改表名： ALTER TABLE tname RENAME new_tname</p></li></ol><h5 id="查询表">查询表</h5><ol type="1"><li><p>查询不重复记录：distinct</p></li><li><p>排序：order by，默认升序，desc降序</p></li><li><p>限制：limit，配合order by进行分页显示</p><p>​ limit offset_start, row_count</p></li><li><p>聚合：</p><ol type="1"><li><p>语法：</p><p><em>SELECT [field] fun_name</em></p><p><em>FROM tname</em></p><p><em>[WHERE condition]</em></p><p><em>[GROUP BY field1, field2, ..., fieldn]</em></p><p><em>[WITH ROLLUP]</em></p><p><em>[HAVING condition]</em></p></li><li><p>说明：</p><p>fun_name: 聚合函数，sum、count(*)、max、min</p><p>GROUP BY：要进行聚合得字段</p><p>WITH ROLLUP： 可选，是否对分类聚合后的结果进行再汇总</p><p>HAVING ：对分类后的结果再进行条件的过滤</p><p><strong><em>注</em></strong>：HAVING <strong>vs</strong> WHERE：HAVING 是对聚合后的结果进行条件的过滤，WHERE是聚合前对记录进行过滤。</p></li></ol></li><li><p>表连接：</p><ul><li><p>内连接</p></li><li><p>外连接</p><ul><li>左连接</li><li>右连接</li></ul></li></ul></li><li><p>子查询：</p><p>​ in、=（子查询记录数唯一）；</p><p>​ 表连接很多情况下优于子查询。</p></li><li><p>记录联合：</p><p>​ union（会对结果进行distinct）、unionall（把结果直接合并在一起）</p></li></ol><h3 id="mysql支持的数据类型">2. MySQL支持的数据类型</h3><ol type="1"><li><p>CHAR、VARCHAR</p><p>​ 检索时，CHAR列会删除尾部的空格，而VARCHAR会保留</p></li><li><p>BINARY</p><p>​保存的是ascii码的16进制表示，且会在值的最后填充“0x00”达到指定的长度</p></li><li><p>ENUM 、 SET</p><p>​ ENUM ：</p><ul><li>忽略大小写；</li><li>插入不在ENUM 指定范围内的值时，会插入范围内的第一个值；</li><li>只允许取单个值 ​ SET</li><li>一次可以取多个成员</li><li>对超出允许值范围的值，不允许注入</li><li>对于包含重复成员的集合只取一次，eg. （'a,d,a'）-&gt; ('a,d')</li></ul></li></ol><h3 id="mysql中的运算符">3. MySQL中的运算符</h3><h5 id="比较运算符">比较运算符</h5><ol type="1"><li><p>不等于：&lt;&gt;、!=</p></li><li><p>&lt;=&gt;: null安全的等于</p><p>​ null = null ---------- null</p><p>​ null &lt;&gt; null ---------- null</p><p>​ null &lt;=&gt; null ---------- 1</p></li></ol><h5 id="逻辑运算与null">逻辑运算与null</h5><ul><li>not null ---------- null</li><li>1 and null ---------- null （and操作数中任何一个为null，返回值为null）</li><li>or<ul><li>1 or null ---------- 1</li><li>0 or null ---------- null</li><li>null or null ---------- null</li></ul></li><li>xor : 操作数中任何一个为null，返回值为null</li></ul><h5 id="位运算">位运算</h5><p>​位取反：MySQL中常量数字默认以8个字节存储，对1（63个前导0）取反会得到非常大的数</p><h3 id="常用函数">4. 常用函数</h3><h5 id="字符串函数">字符串函数</h5><p><img src="https://lics-blogs-1258546254.cos.ap-nanjing.myqcloud.com/images/MySQL/01_stringFunc.png" width="85%"  style="center"/></p><ol type="1"><li><p>LPAD、RPAD “指定的长度len”为填充后的总长度</p><p>LPAD(str, len,padstr)：在str的左边填充给定的字符padstr到指定的长度len，返回填充后的字符串</p><p>RPAD(str, len,padstr)：在str的右边填充给定的字符padstr到指定的长度len，返回填充后的字符串</p></li></ol><h5 id="数值函数">数值函数</h5><table><colgroup><col style="width: 50%" /><col style="width: 50%" /></colgroup><thead><tr class="header"><th>函数</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>ABS(x)</td><td>返回x的绝对值</td></tr><tr class="even"><td>BIN(x)</td><td>返回x的二进制（OCT返回八进制，HEX返回十六进制）</td></tr><tr class="odd"><td>CEILING(x)</td><td>返回大于x的最小整数值</td></tr><tr class="even"><td>EXP(x)</td><td>返回值e（自然对数的底）的x次方</td></tr><tr class="odd"><td>FLOOR(x)</td><td>返回小于x的最大整数值</td></tr><tr class="even"><td>GREATEST(x1,x2,...,xn)</td><td>返回集合中最大的值</td></tr><tr class="odd"><td>LEAST(x1,x2,...,xn)</td><td>返回集合中最小的值</td></tr><tr class="even"><td>LN(x)</td><td>返回x的自然对数</td></tr><tr class="odd"><td>LOG(x,y)</td><td>返回x的以y为底的对数</td></tr><tr class="even"><td>MOD(x,y)</td><td>返回x/y的模（余数）</td></tr><tr class="odd"><td>PI()</td><td>返回pi的值（圆周率）</td></tr><tr class="even"><td>RAND()</td><td>返回０到１内的随机值,可以通过提供一个参数(种子)使RAND()随机数生成器生成一个指定的值</td></tr><tr class="odd"><td>ROUND(x,y)</td><td>返回参数x的四舍五入的有y位小数的值</td></tr><tr class="even"><td>SIGN(x)</td><td>返回代表数字x的符号的值</td></tr><tr class="odd"><td>SQRT(x)</td><td>返回一个数的平方根</td></tr><tr class="even"><td>TRUNCATE(x,y)</td><td>返回数字x截短为y位小数的结果</td></tr></tbody></table><h5 id="流程函数">流程函数</h5><ul><li><p>if(value,t,f) : 如果value是真,返回t;否则返回f</p></li><li><p>ifnull(value1,value2) :如果valve1不为空则返回value1,否则返回value2</p><ul><li>一般在处理含null值的列的数值运算时，用此函数替换null值</li></ul></li><li><p>case when [value1]</p><p>then [result]...else[defalult]END：如果value1是真,返回result1,否则返回defalut</p></li><li><p>case [expr ] when [value1]</p><p>then[result]...else[default]END ：如果expr等于value1,返回result,否则返回defalut</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>EnjoyCoding</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
